; Find a pill and move around it
$seed = 0
$px = 1
$py = 2
$gx = 3
$gy = 4
$dx = 5
$dy = 6
$up_cell = 7
$down_cell = 8
$left_cell = 9
$right_cell = 10
$vit = 11
$dir = 12
$once = 13
$counter = 14
$search_x = 15
$search_y = 16
$search_limit_x = 17
$search_init_y = 18
$search_limit_y = 19
$search_width = 10
$rnd = 0

start:
    jeq .not_once, [$once], 1

once:
    mov [$seed], 23
    int 3
    mul a, 7
    add [$seed], a
    mov [$rnd], 42
    add [$rnd], a
    mov [$once], 1

not_once:
    ; get ghost's coordinates
    int 3
    int 5
    mov [$gx], a
    mov [$gy], b

    ; search in cells
    mov [$search_x], a
    mov [$search_y], b
    mov [$search_limit_x], [$search_x]
    add [$search_limit_x], $search_width

search_start:
    jeq .search_join, [$search_x], [$search_limit_x]
    mov [$search_init_y], b
    mov [$search_limit_y], [$search_y]
    add [$search_limit_y], $search_width

search_body:
    mov a, [$search_x]
    mov b, [$search_y]
    int 7
    jeq .found_pill, a, 3

    inc [$search_y]
    mov a, [$search_y]
    sub a, [$search_limit_y]
    jgt .search_body, a, 0

    inc [$search_x]
    jeq .search_start, 0, 0

found_pill:
    mov [$px], [$search_x]
    mov [$py], [$search_y]
    jeq .search_join, 0, 0

search_join:
    int 3
    int 6
    mov [$vit], a
    mov [$dir], b

    ; get up cells
    mov a, [$gx]
    mov b, [$gy]
    dec b
    int 7
    mov [$up_cell], a

    ; down
    mov a, [$gx]
    mov b, [$gy]
    inc b
    int 7
    mov [$down_cell], a

    ; left
    mov a, [$gx]
    mov b, [$gy]
    dec a
    int 7
    mov [$left_cell], a

    ; right
    mov a, [$gx]
    mov b, [$gy]
    inc a
    int 7
    mov [$right_cell], a

    ; count ways to go
    xor a, a
    jeq .free_up, [$up_cell], 0
    inc a
free_up:
    jeq .free_down, [$down_cell], 0
    inc a
free_down:
    jeq .free_left, [$left_cell], 0
    inc a
free_left:
    jeq .free_right, [$right_cell], 0
    inc a
free_right:
    jlt .no_way, a, 3

    ; check if left the home
    mov a, [$gx]
    mov b, [$gy]
    int 7
    jeq .home, a, 6

    ; check fright mode
    jeq .not_fright, [$vit], 0

fright:
    ; swap coordinates to run from the player
    mov a, [$gx]
    mov b, [$gy]
    mov [$gx], [$px]
    mov [$gx], [$py]
    mov [$px], a
    mov [$py], b

not_fright:
    ; skip the randomize
    jgt .no_rnd, [$px], 0

    ; randomize, rnd = (rnd * 7) %11
    mul [$rnd], 7

random_loop:
    jlt .skip_rnd, [$rnd], 11
    sub [$rnd], 11
    jeq .random_loop, 0, 0

skip_rnd:
    mov a, [$rnd]
    and a, 3
    int 0
    hlt

no_rnd:
    ; compute dx
    jgt .dx_gt_x, [$gx], [$px]

dx_lte_x:
    mov [$dx], [$px]
    sub [$dx], [$gx]
    jeq .dx_join, 0, 0

dx_gt_x:
    mov [$dx], [$gx]
    sub [$dx], [$px]

dx_join:
    jgt .dy_gt_y, [$gy], [$py]

dy_lte_y:
    mov [$dy], [$py]
    sub [$dy], [$gy]
    jeq .dy_join, 0, 0

dy_gt_y:
    mov [$dy], [$gy]
    sub [$dy], [$px]

dy_join:
    ; Find biggest difference and try to compensate it
    jgt .move_x, [$dx], [$dy]

move_y:
    ; move in y
    jgt .move_y_gt_p, [$gy], [$py]

move_y_lte_p:
    ; move in x, if blocked
    jeq .move_x, [$down_cell], 0

    ; down
    mov a, 2
    jeq .dir, 0, 0

move_y_gt_p:
    ; move in x, if blocked
    jeq .move_x, [$up_cell], 0

    ; up
    mov a, 0
    jeq .dir, 0, 0

move_x:
    ; move in x
    jgt .move_x_gt_p, [$gx], [$px]

move_x_lte_p:
    ; move in y, if blocked
    jeq .move_y, [$right_cell], 0

    ; right
    mov a, 1
    jeq .dir, 0, 0

move_x_gt_p:
    ; move in y, if blocked
    jeq .move_y, [$left_cell], 0

    ; left
    mov a, 3
    jeq .dir, 0, 0

home:
    inc [$seed]
    mov a, [$seed]
    and a, 3

    int 0
    hlt

dir:
    ; Continue movement
    jeq .no_way, [$dir], a

    ; Can't swap direction
    mov b, a
    add b, 2
    and b, 3
    jeq .swap_dir, [$dir], b

    ; Ok now, just move
    int 0
no_way:
    hlt

swap_dir:
    jeq .move_y, [$dir], 1
    jeq .move_y, [$dir], 3
    jeq .move_x, [$dir], 0
    jeq .move_x, [$dir], 2
    hlt
