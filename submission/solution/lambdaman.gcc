LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDC 0 ; init_ctx=19
LDC 0 ; init_ctx=20
LDC 0 ; init_ctx=21
LDC 0 ; init_ctx=22
LDC 0 ; init_ctx=23
LDC 0 ; init_ctx=24
LDC 0 ; init_ctx=25
LDC 0 ; init_ctx=26
LDC 0 ; init_ctx=27
LDC 0 ; init_ctx=28
LDC 0 ; init_ctx=29
LDC 0 ; init_ctx=30
LDF 34
AP 31
RTN
LDF 100 ; (js: `function listGet(...`) (js: `function listGet(...`)
ST 0 0
LDF 148 ; (js: `function listSet(...`)
ST 0 1
LDF 247 ; (js: `function listLeng...`)
ST 0 2
LDF 250 ; (js: `function slowList...`)
ST 0 3
LDF 272 ; (js: `function listFrom...`)
ST 0 4
LDF 292 ; (js: `function listIter...`)
ST 0 5
LDF 308 ; (js: `function matrixSe...`)
ST 0 6
LDF 324 ; (js: `function matrixGe...`)
ST 0 7
LDF 334 ; (js: `function matrixIt...`)
ST 0 8
LDF 347 ; (js: `function genList(...`)
ST 0 9
LDF 359 ; (js: `function genMatri...`)
ST 0 10
LDF 370 ; (js: `function shiftDir...`)
ST 0 11
LDF 419 ; (js: `function heapPop(...`)
ST 0 12
LDF 535 ; (js: `function heapSize...`)
ST 0 13
LDF 544 ; (js: `function heapPush...`)
ST 0 14
LDF 630 ; (js: `function heapSort...`)
ST 0 15
LDF 678 ; (js: `function flatRow(...`)
ST 0 16
LDF 693 ; (js: `function flatMatr...`)
ST 0 17
LDF 705 ; (js: `function flatAndS...`)
ST 0 18
LDF 717 ; (js: `function run(map,...`)
ST 0 19
LDF 718 ; (js: `function id(x, i)...`)
ST 0 20
LDF 720 ; (js: `function convertR...`)
ST 0 21
LDF 731 ; (js: `function matrixFr...`)
ST 0 22
LDF 736 ; (js: `function tplGet(t...`)
ST 0 23
LDF 772 ; (js: `function tplGette...`)
ST 0 24
LDF 780 ; (js: `function mod(n, d...`)
ST 0 25
LDF 788 ; (js: `function rand() {...`)
ST 0 26
LDF 801 ; (js: `function slowList...`)
ST 0 27
LDF 817 ; (js: `function opposite...`)
ST 0 28
LDF 831 ; (js: `function step(aiS...`)
ST 0 29
LDC 42 ; literal (js: `var _next = 42;`)
ST 0 30
LDC 0 ; literal (js: `[0, step];`)
LD 0 29
CONS
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 106
AP 3
RTN
LD 1 0 ; (js: `var size = list2[0];`) (js: `{    var size = l...`)
CAR
ST 0 0
LD 1 0 ; (js: `var list = list2[1];`)
CDR
ST 0 1
LDC 1 ; (js: `while (size !== 1...`)
LD 0 0
LDC 1 ; literal
CEQ
SUB
TSEL 118 146 ; while test
LD 0 0 ; (js: `m = (size / 2) | 0;`) (js: `{        m = (siz...`)
LDC 2 ; literal
DIV
ST 0 2
LD 0 2 ; (js: `if (n < m) {     ...`)
LD 1 1
CGT
TSEL 126 133 ; if test
LD 0 1 ; (js: `list = list[0];`) (js: `{            list...`)
CAR
ST 0 1
LD 0 2 ; (js: `size = m;`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 144 144
LD 0 1 ; (js: `list = list[1];`) (js: `{            list...`)
CDR
ST 0 1
LD 0 0 ; (js: `size = size - m;`)
LD 0 2
SUB
ST 0 0
LD 1 1 ; (js: `n = n - m;`)
LD 0 2
SUB
ST 1 1
LDC 0
TSEL 112 112
LD 0 1 ; (js: `return list;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDF 157
AP 6
RTN
LD 1 0 ; (js: `var size = list[0];`) (js: `{    var size = l...`)
CAR
ST 0 0
LD 0 0 ; (js: `var s = size;`)
ST 0 1
LD 1 0 ; (js: `list = list[1];`)
CDR
ST 1 0
LDC 0 ; literal (js: `var stack = 0;`)
ST 0 2
LD 0 1 ; (js: `while (s > 1) {  ...`)
LDC 1 ; literal
CGT
TSEL 171 213 ; while test
LD 0 1 ; (js: `var m = (s / 2) | 0;`) (js: `{        var m = ...`)
LDC 2 ; literal
DIV
ST 0 3
LD 0 3 ; (js: `if (n < m) {     ...`)
LD 1 1
CGT
TSEL 179 193 ; if test
LD 0 3 ; (js: `s = m;`) (js: `{            s = ...`)
ST 0 1
LDC 1 ; literal (js: `stack = [[1, list...`)
LD 1 0
CDR
CONS
LD 0 2
CONS
ST 0 2
LD 1 0 ; (js: `list = list[0];`)
CAR
ST 1 0
LDC 0 ; if-cons-jump
TSEL 211 211
LD 0 1 ; (js: `s = s - m;`) (js: `{            s = ...`)
LD 0 3
SUB
ST 0 1
LD 1 1 ; (js: `n = n - m;`)
LD 0 3
SUB
ST 1 1
LDC 0 ; literal (js: `stack = [[0, list...`)
LD 1 0
CAR
CONS
LD 0 2
CONS
ST 0 2
LD 1 0 ; (js: `list = list[1];`)
CDR
ST 1 0
LDC 0
TSEL 167 167
LD 1 2 ; (js: `var res = x;`)
ST 0 4
LD 0 2 ; (js: `while (typeof sta...`)
ATOM
LDC 0
CEQ
TSEL 220 243 ; while test
LD 0 2 ; (js: `var head = stack[0];`) (js: `{        var head...`)
CAR
ST 0 5
LD 0 5 ; (js: `if (head[0]) {   ...`)
CAR
TSEL 226 233 ; if test
LD 0 4 ; (js: `res = [res, head[...`) (js: `{            res ...`)
LD 0 5
CDR
CONS
ST 0 4
LDC 0 ; if-cons-jump
TSEL 238 238
LD 0 5 ; (js: `res = [head[1], r...`) (js: `{            res ...`)
CDR
LD 0 4
CONS
ST 0 4
LD 0 2 ; (js: `stack = stack[1];`)
CDR
ST 0 2
LDC 0
TSEL 215 215
LD 0 0 ; (js: `return [size, res];`)
LD 0 4
CONS
RTN
LD 0 0 ; (js: `return list[0];`) (js: `{    return list[...`)
CAR
RTN
LDC 0 ; init_ctx=0
LDF 254
AP 1
RTN
LDC 0 ; literal (js: `var n = 0;`) (js: `{    var n = 0;  ...`)
ST 0 0
LD 1 0 ; (js: `while (typeof lis...`)
ATOM
LDC 0
CEQ
TSEL 261 270 ; while test
LD 1 0 ; (js: `list = list[1];`) (js: `{        list = l...`)
CDR
ST 1 0
LD 0 0 ; (js: `n = n + 1;`)
LDC 1 ; literal
ADD
ST 0 0
LDC 0
TSEL 256 256
LD 0 0 ; (js: `return n;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 277
AP 2
RTN
LDF 1038 ; (js: `function _listFro...`) (js: `{    function _li...`)
ST 0 0
LD 1 0 ; (js: `var len = slowLis...`)
LD 2 3
AP 1
ST 0 1
LD 0 1 ; (js: `return [len, _lis...`)
LD 1 0
LD 0 1
LDC 0 ; literal
LD 0 0
AP 3
CAR
CONS
RTN
LDC 0 ; init_ctx=0
LDF 296
AP 1
RTN
LDF 1087 ; (js: `function _listIte...`) (js: `{    var i = 0;  ...`)
ST 0 0
LD 1 0 ; (js: `_listIterate(list...`)
CDR
LD 1 0
CAR
LDC 0 ; literal
LD 0 0
AP 3
ATOM
TSEL 307 307 ; cleanup
RTN
LD 0 0 ; (js: `return listSet(mx...`) (js: `{    return listS...`)
LD 0 1
CDR
LD 0 0
LD 0 1
CDR
LD 1 0
AP 2
LD 0 1
CAR
LD 0 2
LD 1 1
AP 3
LD 1 1
AP 3
RTN
LD 0 0 ; (js: `return listGet(li...`) (js: `{    return listG...`)
LD 0 1
CDR
LD 1 0
AP 2
LD 0 1
CAR
LD 1 0
AP 2
RTN
LDC 0 ; init_ctx=0
LDF 338
AP 1
RTN
LDF 1128 ; (js: `function rowItera...`) (js: `{    function row...`)
ST 0 0
LD 1 0 ; (js: `listIterate(mx, r...`)
LD 0 0
LD 2 5
AP 2
ATOM
TSEL 346 346 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 351
AP 1
RTN
LDF 1141 ; (js: `function _genList...`) (js: `{    function _ge...`)
ST 0 0
LD 1 0 ; (js: `return [n, _genLi...`)
LD 1 0
LD 0 0
AP 1
CONS
RTN
LDC 0 ; init_ctx=0
LDF 363
AP 1
RTN
LDF 1166 ; (js: `function genListF...`) (js: `{    function gen...`)
ST 0 0
LD 1 1 ; (js: `return genList(Y,...`)
LD 0 0
LD 2 9
AP 2
RTN
LD 0 1 ; (js: `if ((d / 2) | 0) ...`) (js: `{    if ((d / 2) ...`)
LDC 2 ; literal
DIV
TSEL 374 398 ; if test
LD 0 1 ; (js: `if (d === 2) { //...`) (js: `{        if (d ==...`)
LDC 2 ; literal
CEQ
TSEL 378 388 ; if test
LD 0 0 ; (js: `return [pos[0], p...`) (js: `{ //down         ...`)
CAR
LD 0 0
CDR
LDC 1 ; literal
ADD
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 396 396
LD 0 0 ; (js: `return [pos[0] - ...`) (js: `{ //left         ...`)
CAR
LDC 1 ; literal
SUB
LD 0 0
CDR
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 418 418
LD 0 1 ; (js: `if (d) { //right ...`) (js: `{        if (d) {...`)
TSEL 400 410 ; if test
LD 0 0 ; (js: `return [pos[0] + ...`) (js: `{ //right        ...`)
CAR
LDC 1 ; literal
ADD
LD 0 0
CDR
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 418 418
LD 0 0 ; (js: `return [pos[0], p...`) (js: `{ //up           ...`)
CAR
LD 0 0
CDR
LDC 1 ; literal
SUB
CONS
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDF 430
AP 8
RTN
LD 1 0 ; (js: `var val = heap[0];`) (js: `{    var val = he...`)
CAR
ST 0 0
LD 0 0 ; (js: `var x = val[0];`)
CAR
ST 0 1
LD 0 0 ; (js: `var size = val[1];`)
CDR
ST 0 2
LD 1 0 ; (js: `var ptr = heap[1];`)
CDR
ST 0 3
LD 0 3 ; (js: `if (typeof ptr[0]...`)
CAR
ATOM
TSEL 446 460 ; if test
LD 0 3 ; (js: `if (typeof ptr[1]...`) (js: `{        if (type...`)
CDR
ATOM
TSEL 450 456 ; if test
LD 0 1 ; (js: `return [x, 0];`) (js: `{            retu...`)
LDC 0 ; literal
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 458 458
LDC 1 ; literal (js: `p = 1;`) (js: `{            p = ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 490 490
LD 0 3 ; (js: `if (typeof ptr[1]...`) (js: `{        if (type...`)
CDR
ATOM
TSEL 464 468 ; if test
LDC 0 ; literal (js: `p = 0;`) (js: `{            p = ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 490 490
LD 0 3 ; (js: `var x0 = ptr[0][0...`) (js: `{            var ...`)
CAR
CAR
CAR
ST 0 6
LD 0 3 ; (js: `var x1 = ptr[1][0...`)
CDR
CAR
CAR
ST 0 7
LD 0 7 ; (js: `if (x0[0] < x1[0]...`)
CAR
LD 0 6
CAR
CGT
TSEL 484 488 ; if test
LDC 0 ; literal (js: `p = 0;`) (js: `{                ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 490 490
LDC 1 ; literal (js: `p = 1;`) (js: `{                ...`)
ST 0 4
LD 0 4 ; (js: `if (p) {        r...`)
TSEL 492 514 ; if test
LD 0 3 ; (js: `res = heapPop(ptr...`) (js: `{        res = he...`)
CDR
LD 2 12
AP 1
ST 0 5
LD 0 1 ; (js: `return [x, [[res[...`)
LD 0 5
CAR
LD 0 2
LDC 1 ; literal
SUB
CONS
LD 0 3
CAR
LD 0 5
CDR
CONS
CONS
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 534 534
LD 0 3 ; (js: `res = heapPop(ptr...`) (js: `{        res = he...`)
CAR
LD 2 12
AP 1
ST 0 5
LD 0 1 ; (js: `return [x, [[res[...`)
LD 0 5
CAR
LD 0 2
LDC 1 ; literal
SUB
CONS
LD 0 5
CDR
LD 0 3
CDR
CONS
CONS
CONS
RTN
RTN
LD 0 0 ; (js: `if (typeof heap =...`) (js: `{    if (typeof h...`)
ATOM
TSEL 538 540 ; if test
LDC 0 ; literal (js: `return 0;`)
RTN
LD 0 0 ; (js: `return heap[0][1];`)
CAR
CDR
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDF 552
AP 5
RTN
LD 1 0 ; (js: `if (typeof heap =...`) (js: `{    if (typeof h...`)
ATOM
TSEL 555 563 ; if test
LD 1 1 ; (js: `return [[x, 1], [...`) (js: `{        return [...`)
LDC 1 ; literal
CONS
LDC 0 ; literal
LDC 0 ; literal
CONS
CONS
RTN
LD 1 0 ; (js: `var val = heap[0];`)
CAR
ST 0 0
LD 0 0 ; (js: `var y = val[0];`)
CAR
ST 0 1
LD 0 0 ; (js: `var size = val[1];`)
CDR
ST 0 2
LD 1 0 ; (js: `var ptr = heap[1];`)
CDR
ST 0 3
LD 0 1 ; (js: `if (x[0] < y[0]) ...`)
CAR
LD 1 1
CAR
CGT
TSEL 581 587 ; if test
LD 1 1 ; (js: `var z = x;`) (js: `{        var z = ...`)
ST 0 4
LD 0 1 ; (js: `x = y;`)
ST 1 1
LD 0 4 ; (js: `y = z;`)
ST 0 1
LD 0 3 ; (js: `if (heapSize(ptr[...`)
CAR
LD 2 13
AP 1
LD 0 3
CDR
LD 2 13
AP 1
CGT
TSEL 597 614 ; if test
LD 0 1 ; (js: `return [[y, size ...`) (js: `{        return [...`)
LD 0 2
LDC 1 ; literal
ADD
CONS
LD 0 3
CAR
LD 0 3
CDR
LD 1 1
LD 2 14
AP 2
CONS
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 629 629
LD 0 1 ; (js: `return [[y, size ...`) (js: `{        return [...`)
LD 0 2
LDC 1 ; literal
ADD
CONS
LD 0 3
CAR
LD 1 1
LD 2 14
AP 2
LD 0 3
CDR
CONS
CONS
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 636
AP 3
RTN
LDC 0 ; literal (js: `var heap = 0;`) (js: `{    // descendin...`)
ST 0 0
LD 1 0 ; (js: `while (typeof arr...`)
ATOM
LDC 0
CEQ
TSEL 643 654 ; while test
LD 0 0 ; (js: `heap = heapPush(h...`) (js: `{        heap = h...`)
LD 1 0
CAR
LD 2 14
AP 2
ST 0 0
LD 1 0 ; (js: `arr = arr[1];`)
CDR
ST 1 0
LDC 0
TSEL 638 638
LDC 0 ; literal (js: `var res = 0;`)
ST 0 1
LD 0 0 ; (js: `while (heapSize(h...`)
LD 2 13
AP 1
LDC 0 ; literal
CGT
TSEL 662 676 ; while test
LD 0 0 ; (js: `var pop = heapPop...`) (js: `{        var pop ...`)
LD 2 12
AP 1
ST 0 2
LD 0 2 ; (js: `res = [pop[0], res];`)
CAR
LD 0 1
CONS
ST 0 1
LD 0 2 ; (js: `heap = pop[1];`)
CDR
ST 0 0
LDC 0
TSEL 656 656
LD 0 1 ; (js: `return res;`)
RTN
LDC 0 ; init_ctx=0
LDF 682
AP 1
RTN
LDF 1171 ; (js: `function _flatRow...`) (js: `{    function _fl...`)
ST 0 0
LD 1 0 ; (js: `return _flatRow(r...`)
CDR
LDC 0 ; literal
LD 1 0
CAR
LD 1 2
LD 0 0
AP 4
RTN
LDC 0 ; init_ctx=0
LDF 697
AP 1
RTN
LDF 1209 ; (js: `function processR...`) (js: `{    function pro...`)
ST 0 0
LD 1 0 ; (js: `return flatRow(mx...`)
LD 0 0
LDC 0 ; literal
LD 2 16
AP 3
RTN
LDC 0 ; init_ctx=0
LDF 709
AP 1
RTN
LD 1 0 ; (js: `var val = flatMat...`) (js: `{    var val = fl...`)
LD 2 17
AP 1
ST 0 0
LD 0 0 ; (js: `return heapSort(v...`)
LD 2 15
AP 1
RTN
RTN
LD 0 0 ; (js: `return x;`) (js: `{    return x;}`)
RTN
LDC 0 ; init_ctx=0
LDF 724
AP 1
RTN
LD 1 0 ; (js: `var val = listFro...`) (js: `{    var val = li...`)
LD 2 20
LD 2 4
AP 2
ST 0 0
LD 0 0 ; (js: `return val;`)
RTN
LD 0 0 ; (js: `return listFromSl...`) (js: `{    return listF...`)
LD 1 21
LD 1 4
AP 2
RTN
LD 0 2 ; (js: `if(i === 0) {    ...`) (js: `{    if(i === 0) ...`)
LDC 0 ; literal
CEQ
TSEL 740 745 ; if test
LD 0 0 ; (js: `return tpl[0];`) (js: `{        return t...`)
CAR
RTN
LDC 0 ; if-cons-jump
TSEL 771 771
LD 0 2 ; (js: `if(i === 1 && len...`)
LDC 1 ; literal
CEQ
LD 0 1
LDC 2 ; literal
CEQ
MUL
LDC 1
CEQ
TSEL 755 760 ; if test
LD 0 0 ; (js: `return tpl[1];`) (js: `{        return t...`)
CDR
RTN
LDC 0 ; if-cons-jump
TSEL 771 771
LD 0 0 ; (js: `return tplGet(tpl...`) (js: `{        return t...`)
CDR
LD 0 1
LDC 1 ; literal
SUB
LD 0 2
LDC 1 ; literal
SUB
LD 1 23
AP 3
RTN
RTN
LDC 0 ; init_ctx=0
LDF 776
AP 1
RTN
LDF 1221 ; (js: `function getter(i...`) (js: `{    function get...`)
ST 0 0
LD 0 0 ; (js: `return getter;`)
RTN
LD 0 0 ; (js: `return n - ((n / ...`) (js: `{    return n - (...`)
LD 0 0
LD 0 1
DIV
LD 0 1
MUL
SUB
RTN
LD 1 30 ; (js: `_next = (_next * ...`) (js: `{    _next = (_ne...`)
LDC 1103515245 ; literal
MUL
LDC 12345 ; literal
ADD
ST 1 30
LD 1 30 ; (js: `return mod(((_nex...`)
LDC 65536 ; literal
DIV
LDC 32768 ; literal
LD 1 25
AP 2
RTN
LD 0 0 ; (js: `if (typeof list =...`) (js: `{    if (typeof l...`)
ATOM
TSEL 804 806 ; if test
LD 0 0 ; (js: `return list;`)
RTN
LD 0 0 ; (js: `return [f(list[0]...`)
CAR
LD 0 1
AP 1
LD 0 0
CDR
LD 0 1
LD 1 27
AP 2
CONS
RTN
LD 0 0 ; (js: `d = d + 2;`) (js: `{    d = d + 2;  ...`)
LDC 2 ; literal
ADD
ST 0 0
LD 0 0 ; (js: `if (d >= 4)      ...`)
LDC 4 ; literal
CGTE
TSEL 825 829 ; if test
LD 0 0 ; (js: `d = d - 4;`)
LDC 4 ; literal
SUB
ST 0 0
LD 0 0 ; (js: `return d;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDC 0 ; init_ctx=19
LDC 0 ; init_ctx=20
LDC 0 ; init_ctx=21
LDC 0 ; init_ctx=22
LDC 0 ; init_ctx=23
LDC 0 ; init_ctx=24
LDC 0 ; init_ctx=25
LDC 0 ; init_ctx=26
LDC 0 ; init_ctx=27
LDF 862
AP 28
RTN
LDF 1227 ; (js: `function convertM...`) (js: `{    var _4FastLi...`)
ST 0 0
LDF 1241 ; (js: `function canGo(po...`)
ST 0 1
LDF 1290 ; (js: `function bounty(c...`)
ST 0 2
LDF 1366 ; (js: `function genPath(...`)
ST 0 3
LDF 1370 ; (js: `function genSmell...`)
ST 0 4
LDF 1372 ; (js: `function genMaze(...`)
ST 0 5
LDF 1374 ; (js: `function calcPath...`)
ST 0 6
LDF 1611 ; (js: `function calcSmel...`)
ST 0 7
LDC 4 ; literal (js: `var _4FastList = ...`)
LDC 0 ; literal
LDC 0 ; literal
CONS
LDC 0 ; literal
LDC 0 ; literal
CONS
CONS
CONS
ST 0 8
LD 1 1 ; (js: `worldState = tplG...`)
LDC 4 ; literal
LD 2 24
AP 2
ST 1 1
LDC 0 ; literal (js: `var map = worldSt...`)
LD 1 1
AP 1
ST 0 9
LDC 1 ; literal
LD 1 1
AP 1
LDC 5 ; literal
LD 2 24
AP 2
ST 0 10
LDC 0 ; literal
LD 0 10
AP 1
ST 0 11
LDC 2 ; literal
LD 1 1
AP 1
ST 0 12
LDC 3 ; literal
LD 1 1
AP 1
ST 0 13
LDC 0 ; literal
ST 0 14
LD 0 9 ; (js: `map = listFromSlo...`)
LD 0 0
LD 2 4
AP 2
ST 0 9
LD 0 14 ; (js: `ghostsStartingPos...`)
LD 2 20
LD 2 4
AP 2
ST 0 14
LD 0 9 ; (js: `var Y = listLengt...`)
LD 2 2
AP 1
ST 0 15
LD 0 9 ; (js: `var X = listLengt...`)
LDC 0 ; literal
LD 2 0
AP 2
LD 2 2
AP 1
ST 0 16
LD 0 16 ; (js: `var paths = genMa...`)
LD 0 15
LD 0 3
LD 2 10
AP 3
ST 0 17
LDC 0 ; literal (js: `var flatPaths = 0;`)
ST 0 18
LD 0 16 ; (js: `var smell = genMa...`)
LD 0 15
LD 0 4
LD 2 10
AP 3
ST 0 19
LD 0 16 ; (js: `var maze = genMat...`)
LD 0 15
LD 0 5
LD 2 10
AP 3
ST 0 20
LDC 1 ; literal (js: `var myPos = lmSta...`)
LD 0 10
AP 1
ST 0 21
LD 0 21 ; (js: `var myOrigPos = m...`)
ST 0 22
LD 0 6 ; (js: `calcPaths();`)
AP 0
ATOM
TSEL 969 969 ; cleanup
LD 0 7 ; (js: `calcSmell();`)
AP 0
ATOM
TSEL 973 973 ; cleanup
LDC 0 ; literal (js: `var d = 0;`)
ST 0 23
LDC 0 ; (js: `var bestSmell = -1;`)
LDC 1 ; literal
SUB
ST 0 24
LDC 0 ; literal (js: `var bestD = 0;`)
ST 0 25
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 23
CGT
TSEL 985 1030 ; while test
LD 0 22 ; (js: `var xxx = shiftDi...`) (js: `{        var xxx ...`)
LD 0 23
LD 2 11
AP 2
ST 0 26
LD 0 19 ; (js: `var val = matrixG...`)
LD 0 26
LD 2 7
AP 2
ST 0 27
LD 0 26 ; (js: `if (canGo(xxx) > ...`)
LD 0 1
AP 1
LDC 0 ; literal
CGT
LD 0 27
LD 0 24
CGT
LD 0 27
LD 0 24
CEQ
LD 2 26
AP 0
LDC 16384 ; literal
CGT
MUL
LDC 1
CEQ
ADD
LDC 0
CGT
MUL
LDC 1
CEQ
TSEL 1020 1024 ; if test
LD 0 27 ; (js: `bestSmell = val;`) (js: `{            best...`)
ST 0 24
LD 0 23 ; (js: `bestD = d;`)
ST 0 25
LD 0 23 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 23
LDC 0
TSEL 981 981
LD 0 17 ; (js: `return [[paths, [...`)
LD 0 19
LD 0 9
CONS
CONS
LD 0 25
CONS
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 1044
AP 3
RTN
LD 1 1 ; (js: `if (n === 1) {   ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1048 1057 ; if test
LD 1 0 ; (js: `return [f(arr[0],...`) (js: `{            retu...`)
CAR
LD 1 2
LD 3 1
AP 2
LD 1 0
CDR
CONS
RTN
LD 1 1 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `var left = _listF...`)
LD 0 0
LD 1 2
LD 2 0
AP 3
ST 0 1
LD 0 1 ; (js: `var right = _list...`)
CDR
LD 1 1
LD 0 0
SUB
LD 1 2
LD 0 0
ADD
LD 2 0
AP 3
ST 0 2
LD 0 1 ; (js: `return [[left[0],...`)
CAR
LD 0 2
CAR
CONS
LD 0 2
CDR
CONS
RTN
LDC 0 ; init_ctx=0
LDF 1091
AP 1
RTN
LD 1 1 ; (js: `if(length === 1) ...`) (js: `{        if(lengt...`)
LDC 1 ; literal
CEQ
TSEL 1095 1103 ; if test
LD 1 0 ; (js: `f(list, i);`) (js: `{            f(li...`)
LD 1 2
LD 3 1
AP 2
ATOM
TSEL 1101 1101 ; cleanup
LDC 0 ; if-cons-jump
TSEL 1127 1127
LD 1 1 ; (js: `var halfLength = ...`) (js: `{            var ...`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `_listIterate(list...`)
CAR
LD 0 0
LD 1 2
LD 2 0
AP 3
ATOM
TSEL 1115 1115 ; cleanup
LD 1 0 ; (js: `_listIterate(list...`)
CDR
LD 1 1
LD 0 0
SUB
LD 1 2
LD 0 0
ADD
LD 2 0
AP 3
ATOM
TSEL 1127 1127 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 1132
AP 1
RTN
LDF 1735 ; (js: `function cellIter...`) (js: `{        function...`)
ST 0 0
LD 1 0 ; (js: `listIterate(row, ...`)
LD 0 0
LD 4 5
AP 2
ATOM
TSEL 1140 1140 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 1145
AP 1
RTN
LD 1 0 ; (js: `if (n === 1)     ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1149 1152 ; if test
LD 3 1 ; (js: `return f();`)
AP 0
RTN
LD 1 0 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 0 0 ; (js: `return [ _genList...`)
LD 2 0
AP 1
LD 1 0
LD 0 0
SUB
LD 2 0
AP 1
CONS
RTN
LD 2 0 ; (js: `return genList(X,...`) (js: `{        return g...`)
LD 2 2
LD 3 9
AP 2
RTN
LDC 0 ; init_ctx=0
LDF 1175
AP 1
RTN
LD 1 2 ; (js: `if (n === 1) {   ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1179 1185 ; if test
LD 1 1 ; (js: `return f(x, row, a);`) (js: `{            retu...`)
LD 1 0
LD 1 3
LD 3 1
AP 3
RTN
LD 1 2 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `a = _flatRow(row[...`)
CDR
LD 1 1
LD 0 0
ADD
LD 1 2
LD 0 0
SUB
LD 1 3
LD 2 0
AP 4
ST 1 3
LD 1 0 ; (js: `return _flatRow(r...`)
CAR
LD 1 1
LD 0 0
LD 1 3
LD 2 0
AP 4
RTN
LDC 0 ; init_ctx=0
LDF 1213
AP 1
RTN
LDF 1743 ; (js: `function processC...`) (js: `{        function...`)
ST 0 0
LD 1 1 ; (js: `return flatRow(d,...`)
LD 0 0
LD 1 2
LD 4 16
AP 3
RTN
LD 2 0 ; (js: `return tplGet(tpl...`) (js: `{        return t...`)
LD 2 1
LD 0 0
LD 3 23
AP 3
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 1232
AP 2
RTN
LDF 1760 ; (js: `function convertM...`) (js: `{        function...`)
ST 0 0
LD 1 0 ; (js: `var val = listFro...`)
LD 0 0
LD 4 4
AP 2
ST 0 1
LD 0 1 ; (js: `return val;`)
RTN
LDC 0 ; init_ctx=0
LDF 1245
AP 1
RTN
LD 2 9 ; (js: `var cell = matrix...`) (js: `{        var cell...`)
LD 1 0
LD 4 7
AP 2
ST 0 0
LD 0 0 ; (js: `if (cell === 1 ||...`)
LDC 1 ; literal
CEQ
LD 0 0
LDC 5 ; literal
CEQ
ADD
LDC 0
CGT
LD 0 0
LDC 6 ; literal
CEQ
ADD
LDC 0
CGT
TSEL 1266 1268 ; if test
LDC 127 ; literal (js: `return 127;`)
RTN
LD 0 0 ; (js: `if (cell === 2 ||...`)
LDC 2 ; literal
CEQ
LD 0 0
LDC 3 ; literal
CEQ
ADD
LDC 0
CGT
LD 0 0
LDC 4 ; literal
CEQ
ADD
LDC 0
CGT
TSEL 1284 1286 ; if test
LDC 137 ; literal (js: `return 137;`)
RTN
LDC 0 ; (js: `return -1;`)
LDC 1 ; literal
SUB
RTN
LDC 0 ; init_ctx=0
LDF 1294
AP 1
RTN
LD 1 0 ; (js: `if (cell === 2) {...`) (js: `{        var b;  ...`)
LDC 2 ; literal
CEQ
TSEL 1298 1302 ; if test
LDC 100 ; literal (js: `b = 100;`) (js: `{            b = ...`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1358 1358
LD 1 0 ; (js: `if (cell === 3) {...`)
LDC 3 ; literal
CEQ
TSEL 1306 1324 ; if test
LD 2 13 ; (js: `if (fruitStatus >...`) (js: `{            if (...`)
LDC 0 ; literal
CGT
LD 1 1
LD 2 11
CGT
MUL
LDC 1
CEQ
TSEL 1316 1320 ; if test
LDC 10000 ; literal (js: `b = 10000;`) (js: `{                ...`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1322 1322
LDC 10 ; literal (js: `b = 10;`) (js: `{                ...`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1358 1358
LD 1 0 ; (js: `if (cell === 4 &&...`)
LDC 4 ; literal
CEQ
LD 2 13
LDC 0 ; literal
CGT
MUL
LDC 1
CEQ
TSEL 1334 1338 ; if test
LDC 10000 ; literal (js: `b = 10000;`) (js: `{            b = ...`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1358 1358
LD 1 0 ; (js: `if (cell === 7) {...`)
LDC 7 ; literal
CEQ
TSEL 1342 1346 ; if test
LDC 10000 ; literal (js: `b = 10000;`) (js: `{            b = ...`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1358 1358
LD 1 0 ; (js: `if (cell === 8) {...`)
LDC 8 ; literal
CEQ
TSEL 1350 1356 ; if test
LDC 0 ; (js: `b = -10;`) (js: `{            b = ...`)
LDC 10 ; literal
SUB
ST 0 0
LDC 0 ; if-cons-jump
TSEL 1358 1358
LDC 1 ; literal (js: `b = 1;`) (js: `{            b = ...`)
ST 0 0
LD 0 0 ; (js: `return ((b * 1000...`)
LDC 100000 ; literal
MUL
LD 1 1
LDC 1 ; literal
ADD
DIV
RTN
LDC 0 ; (js: `return -1;`) (js: `{        return -...`)
LDC 1 ; literal
SUB
RTN
LDC 0 ; literal (js: `return 0;`) (js: `{        return 0...`)
RTN
LDC 0 ; literal (js: `return 0;`) (js: `{        return 0...`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDF 1396
AP 19
RTN
LDF 1772 ; (js: `function prepareG...`) (js: `{        paths = ...`)
ST 0 0
LD 2 17 ; (js: `paths = matrixSet...`)
LD 2 21
LDC 0 ; literal
LD 4 6
AP 3
ST 2 17
LDC 0 ; literal (js: `flatPaths = [[0, ...`)
LD 2 21
CONS
LD 2 18
CONS
ST 2 18
LDC 0 ; literal (js: `var toDo = 0;`)
ST 0 2
LD 2 12 ; (js: `var ghs = prepare...`)
LD 0 0
AP 1
ST 0 3
LD 2 11 ; (js: `var myStatus = [l...`)
LDC 0 ; literal
CONS
ST 0 4
LD 2 21 ; (js: `var state = [myPo...`)
LD 0 3
LD 0 4
CONS
CONS
ST 0 5
LD 0 2 ; (js: `toDo = heapPush(t...`)
LDC 0 ; literal
LD 0 5
CONS
LD 4 14
AP 2
ST 0 2
LDC 0 ; literal (js: `var heapOps = 0;`)
ST 0 6
LD 0 2 ; (js: `while (heapSize(t...`)
LD 4 13
AP 1
LDC 0 ; literal
CGT
LDC 150 ; literal
LD 0 6
CGT
MUL
LDC 1
CEQ
TSEL 1447 1609 ; while test
LD 0 6 ; (js: `heapOps = heapOps...`) (js: `{            heap...`)
LDC 1 ; literal
ADD
ST 0 6
LD 0 2 ; (js: `var popRes = heap...`)
LD 4 12
AP 1
ST 0 7
LD 0 7 ; (js: `var state = popRe...`)
CAR
ST 0 5
LD 0 5 ; (js: `var t = state[0];`)
CAR
ST 0 8
LD 0 5 ; (js: `state = state[1];`)
CDR
ST 0 5
LD 0 5 ; (js: `myPos = state[0];`)
CAR
ST 2 21
LD 0 5 ; (js: `state = state[1];`)
CDR
ST 0 5
LD 0 5 ; (js: `ghs = state[0];`)
CAR
ST 0 3
LD 0 5 ; (js: `myStatus = state[1];`)
CDR
ST 0 4
LD 0 4 ; (js: `var myVitality = ...`)
CAR
ST 0 9
LD 0 7 ; (js: `toDo = popRes[1];`)
CDR
ST 0 2
LDC 0 ; literal (js: `var d = 0;`)
ST 0 10
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 10
CGT
TSEL 1488 1607 ; while test
LD 2 21 ; (js: `var newPos = shif...`) (js: `{                ...`)
LD 0 10
LD 4 11
AP 2
ST 0 11
LD 0 11 ; (js: `var dt = canGo(ne...`)
LD 2 1
AP 1
ST 0 12
LD 0 12 ; (js: `if (dt >= 0 && ma...`)
LDC 0 ; literal
CGTE
LD 2 17
LD 0 11
LD 4 7
AP 2
LDC 0
LDC 1 ; literal
SUB
CEQ
MUL
LDC 1
CEQ
TSEL 1512 1601 ; if test
LDF 1788 ; (js: `function updateGh...`) (js: `{                ...`)
ST 0 1
LDC 0 ; literal (js: `var frighten = 0;`)
ST 0 13
LD 0 9 ; (js: `var myNewVitality...`)
ST 0 14
LD 2 9 ; (js: `if (matrixGet(map...`)
LD 0 11
LD 4 7
AP 2
LDC 3 ; literal
CEQ
TSEL 1525 1535 ; if test
LD 0 9 ; (js: `if (!myVitality) ...`) (js: `{                ...`)
LDC 0
CEQ
TSEL 1529 1531 ; if test
LDC 1 ; literal (js: `frighten = 1;`) (js: `{                ...`)
ST 0 13
LDC 127 ; literal (js: `myNewVitality = 1...`)
LDC 20 ; literal
MUL
ST 0 14
LDC 1 ; literal (js: `var alive = 1;`)
ST 0 15
LDC 0 ; literal (js: `var scoreBonus = 0;`)
ST 0 16
LD 0 3 ; (js: `var newGhs = slow...`)
LD 0 1
LD 4 27
AP 2
ST 0 17
LD 0 16 ; (js: `if (scoreBonus) {...`)
TSEL 1546 1552 ; if test
LD 2 19 ; (js: `smell = matrixSet...`) (js: `{                ...`)
LD 0 11
LD 0 16
LD 4 6
AP 3
ST 2 19
LD 2 17 ; (js: `paths = matrixSet...`)
LD 0 11
LD 0 8
LD 0 12
ADD
LD 4 6
AP 3
ST 2 17
LD 0 8 ; (js: `flatPaths = [[t +...`)
LD 0 12
ADD
LD 0 11
CONS
LD 2 18
CONS
ST 2 18
LD 0 15 ; (js: `if (alive) {     ...`)
TSEL 1570 1599 ; if test
LD 0 14 ; (js: `myNewVitality = m...`) (js: `{                ...`)
LD 0 12
SUB
ST 0 14
LDC 0 ; literal (js: `if (myNewVitality...`)
LD 0 14
CGT
TSEL 1578 1580 ; if test
LDC 0 ; literal (js: `myNewVitality = 0;`)
ST 0 14
LD 0 14 ; (js: `var myNewStatus =...`)
LDC 0 ; literal
CONS
ST 0 18
LD 0 2 ; (js: `toDo = heapPush(t...`)
LD 0 8
LD 0 12
ADD
LD 0 11
LD 0 17
LD 0 18
CONS
CONS
CONS
LD 4 14
AP 2
ST 0 2
LDC 0 ; if-cons-jump
TSEL 1601 1601
LDC 1 ; literal (js: `alive = 1;`) (js: `{                ...`)
ST 0 15
LD 0 10 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 10
LDC 0
TSEL 1484 1484
LDC 0
TSEL 1435 1435
LDC 0 ; literal (js: `return 0;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDF 1624
AP 10
RTN
LD 2 18 ; (js: `var sortedPaths =...`) (js: `{        var sort...`)
LD 4 15
AP 1
ST 0 0
LD 0 0 ; (js: `while (typeof sor...`)
ATOM
LDC 0
CEQ
TSEL 1633 1733 ; while test
LD 0 0 ; (js: `var pos = sortedP...`) (js: `{            var ...`)
CAR
CDR
ST 0 1
LD 2 17 ; (js: `var t0 = matrixGe...`)
LD 0 1
LD 4 7
AP 2
ST 0 2
LD 2 9 ; (js: `var cell = matrix...`)
LD 0 1
LD 4 7
AP 2
ST 0 3
LD 2 19 ; (js: `var myVal = matri...`)
LD 0 1
LD 4 7
AP 2
LD 0 3
LD 0 2
LD 2 2
AP 2
ADD
ST 0 4
LD 2 19 ; (js: `smell = matrixSet...`)
LD 0 1
LD 0 4
LD 4 6
AP 3
ST 2 19
LDC 0 ; literal (js: `var d = 0;`)
ST 0 5
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 5
CGT
TSEL 1669 1728 ; while test
LD 0 1 ; (js: `var newPos = shif...`) (js: `{                ...`)
LD 0 5
LD 4 11
AP 2
ST 0 6
LD 0 6 ; (js: `if (canGo(newPos)...`)
LD 2 1
AP 1
LDC 0 ; literal
CGT
TSEL 1680 1722 ; if test
LD 2 17 ; (js: `var t = matrixGet...`) (js: `{                ...`)
LD 0 6
LD 4 7
AP 2
ST 0 7
LD 0 7 ; (js: `if (t === t0 - 12...`)
LD 0 2
LDC 127 ; literal
SUB
CEQ
LD 0 7
LD 0 2
LDC 137 ; literal
SUB
CEQ
ADD
LDC 0
CGT
TSEL 1699 1722 ; if test
LD 0 4 ; (js: `var newVal = myVal;`) (js: `{                ...`)
ST 0 8
LD 2 19 ; (js: `var oldVal = matr...`)
LD 0 6
LD 4 7
AP 2
ST 0 9
LD 0 9 ; (js: `if (oldVal === 0 ...`)
LDC 0 ; literal
CEQ
LD 0 8
LD 0 9
CGT
ADD
LDC 0
CGT
TSEL 1716 1722 ; if test
LD 2 19 ; (js: `smell = matrixSet...`) (js: `{                ...`)
LD 0 6
LD 0 8
LD 4 6
AP 3
ST 2 19
LD 0 5 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 5
LDC 0
TSEL 1665 1665
LD 0 0 ; (js: `sortedPaths = sor...`)
CDR
ST 0 0
LDC 0
TSEL 1628 1628
LDC 0 ; literal (js: `return 0;`)
RTN
LD 0 0 ; (js: `f(v, i, j);`) (js: `{            f(v,...`)
LD 2 1
LD 0 1
LD 4 1
AP 3
ATOM
TSEL 1742 1742 ; cleanup
RTN
LD 0 1 ; (js: `if (r >= 0) {    ...`) (js: `{            if (...`)
LDC 0 ; literal
CGTE
TSEL 1747 1757 ; if test
LD 0 1 ; (js: `return [[r, [x, y...`) (js: `{                ...`)
LD 0 0
LD 2 0
CONS
CONS
LD 0 2
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 1759 1759
LD 0 2 ; (js: `return tail;`) (js: `{                ...`)
RTN
RTN
LD 0 0 ; (js: `if (x === 6) {   ...`) (js: `{            if (...`)
LDC 6 ; literal
CEQ
TSEL 1764 1770 ; if test
LD 0 1 ; (js: `ghostsStartingPos...`) (js: `{                ...`)
LD 2 1
CONS
LD 3 14
CONS
ST 3 14
LD 0 0 ; (js: `return x;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 1777
AP 2
RTN
LDF 1910 ; (js: `function prepareG...`) (js: `{            var ...`)
ST 0 0
LDC 0 ; (js: `var id = -1;`)
LDC 1 ; literal
SUB
ST 0 1
LD 4 12 ; (js: `return slowListMa...`)
LD 0 0
LD 6 27
AP 2
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDF 1802
AP 11
RTN
LDF 1920 ; (js: `function handleCo...`) (js: `{                ...`)
ST 0 0
LDF 1969 ; (js: `function ghostStr...`)
ST 0 1
LDF 2106 ; (js: `function findGhos...`)
ST 0 2
LDF 2166 ; (js: `function handleMo...`)
ST 0 3
LD 1 0 ; (js: `var gi = state[0];`)
CAR
ST 0 4
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var gt = state[0];`)
CAR
ST 0 5
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var vit = state[0];`)
CAR
ST 0 6
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var pos = state[0];`)
CAR
ST 0 7
LD 1 0 ; (js: `var d = state[1];`)
CDR
ST 0 8
LD 2 13 ; (js: `if (frighten) {  ...`)
TSEL 1836 1844 ; if test
LDC 1 ; literal (js: `vit = 1;`) (js: `{                ...`)
ST 0 6
LD 0 8 ; (js: `d = oppositeDir(d);`)
LD 6 28
AP 1
ST 0 8
LDC 0 ; if-cons-jump
TSEL 1854 1854
LD 0 6 ; (js: `if (vit && myNewV...`)
LD 2 14
LDC 0 ; literal
CEQ
MUL
LDC 1
CEQ
TSEL 1852 1854 ; if test
LDC 0 ; literal (js: `vit = 0;`) (js: `{                ...`)
ST 0 6
LD 0 0 ; (js: `handleCollision();`)
AP 0
ATOM
TSEL 1858 1858 ; cleanup
LD 2 8 ; (js: `if (gt < t + dt) ...`)
LD 2 12
ADD
LD 0 5
CGT
TSEL 1864 1900 ; if test
LD 0 3 ; (js: `handleMove();`) (js: `{                ...`)
AP 0
ATOM
TSEL 1868 1868 ; cleanup
LD 0 4 ; (js: `var gn = gi;`)
ST 0 9
LD 0 9 ; (js: `while(gn > 4) gn ...`)
LDC 4 ; literal
CGT
TSEL 1874 1880 ; while test
LD 0 9 ; (js: `gn = gn - 4;`)
LDC 4 ; literal
SUB
ST 0 9
LDC 0
TSEL 1870 1870
LD 0 6 ; (js: `if (vit) { // fri...`)
TSEL 1882 1890 ; if test
LDC 195 ; literal (js: `gdt = 195 + (gn *...`) (js: `{ // frightened o...`)
LD 0 9
LDC 3 ; literal
MUL
ADD
ST 0 10
LDC 0 ; if-cons-jump
TSEL 1896 1896
LDC 130 ; literal (js: `gdt = 130 + (gn *...`) (js: `{                ...`)
LD 0 9
LDC 2 ; literal
MUL
ADD
ST 0 10
LD 0 5 ; (js: `gt = gt + gdt;`)
LD 0 10
ADD
ST 0 5
LD 0 4 ; (js: `return [gi, [gt, ...`)
LD 0 5
LD 0 6
LD 0 7
LD 0 8
CONS
CONS
CONS
CONS
RTN
LD 1 1 ; (js: `id = id + 1;`) (js: `{                ...`)
LDC 1 ; literal
ADD
ST 1 1
LD 1 1 ; (js: `return [id, [1, g...`)
LDC 1 ; literal
LD 0 0
CONS
CONS
RTN
LD 1 7 ; (js: `if (pos[0] === ne...`) (js: `{                ...`)
CAR
LD 3 11
CAR
CEQ
LD 1 7
CDR
LD 3 11
CDR
CEQ
MUL
LDC 1
CEQ
TSEL 1934 1967 ; if test
LD 1 6 ; (js: `if (vit === 0) { ...`) (js: `{                ...`)
LDC 0 ; literal
CEQ
TSEL 1938 1947 ; if test
LDC 0 ; literal (js: `alive = 0;`) (js: `{                ...`)
ST 3 15
LDC 8 ; literal (js: `scoreBonus = boun...`)
LD 3 8
LD 5 2
AP 2
ST 3 16
LDC 0 ; if-cons-jump
TSEL 1967 1967
LD 1 6 ; (js: `if (vit === 1) { ...`)
LDC 1 ; literal
CEQ
TSEL 1951 1967 ; if test
LD 5 14 ; (js: `pos = listGet(gho...`) (js: `{                ...`)
LD 1 4
LD 7 0
AP 2
ST 1 7
LDC 2 ; literal (js: `vit = 2;`)
ST 1 6
LDC 2 ; literal (js: `d = 2;`)
ST 1 8
LD 3 16 ; (js: `scoreBonus = scor...`)
LDC 7 ; literal
LD 3 8
LD 5 2
AP 2
ADD
ST 3 16
LDC 0 ; literal (js: `return 0;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDF 1978
AP 6
RTN
LDC 0 ; literal (js: `d = shiftDir([0,0...`) (js: `{                ...`)
LDC 0 ; literal
CONS
LD 1 0
LD 8 11
AP 2
ST 1 0
LD 1 0 ; (js: `var dx = d[0];`)
CAR
ST 0 0
LD 1 0 ; (js: `var dy = d[1];`)
CDR
ST 0 1
LD 4 11 ; (js: `var dX = newPos[0...`)
CAR
LD 2 7
CAR
SUB
ST 0 2
LD 4 11 ; (js: `var dY = newPos[1...`)
CDR
LD 2 7
CDR
SUB
ST 0 3
LDC 0 ; literal (js: `if (dX < 0) {    ...`)
LD 0 2
CGT
TSEL 2007 2015 ; if test
LDC 0 ; literal (js: `dX = 0 - dX;`) (js: `{                ...`)
LD 0 2
SUB
ST 0 2
LDC 0 ; literal (js: `dx = 0 - dx;`)
LD 0 0
SUB
ST 0 0
LDC 0 ; literal (js: `if (dY < 0) {    ...`)
LD 0 3
CGT
TSEL 2019 2027 ; if test
LDC 0 ; literal (js: `dY = 0 - dY;`) (js: `{                ...`)
LD 0 3
SUB
ST 0 3
LDC 0 ; literal (js: `dy = 0 - dy;`)
LD 0 1
SUB
ST 0 1
LD 0 3 ; (js: `if (dX < dY) {   ...`)
LD 0 2
CGT
TSEL 2031 2063 ; if test
LD 0 1 ; (js: `if (dy > 0) {    ...`) (js: `{                ...`)
LDC 0 ; literal
CGT
TSEL 2035 2039 ; if test
LDC 2 ; literal (js: `s = 2;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2061 2061
LD 0 0 ; (js: `if (dx > 0) {    ...`)
LDC 0 ; literal
CGT
TSEL 2043 2047 ; if test
LDC 1 ; literal (js: `s = 1;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2061 2061
LDC 0 ; literal (js: `if (dx < 0) {    ...`)
LD 0 0
CGT
TSEL 2051 2057 ; if test
LDC 0 ; (js: `s = -1;`) (js: `{                ...`)
LDC 1 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2061 2061
LDC 0 ; (js: `s = -2;`) (js: `{                ...`)
LDC 2 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2093 2093
LD 0 0 ; (js: `if (dx > 0) {    ...`) (js: `{                ...`)
LDC 0 ; literal
CGT
TSEL 2067 2071 ; if test
LDC 2 ; literal (js: `s = 2;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2093 2093
LD 0 1 ; (js: `if (dy > 0) {    ...`)
LDC 0 ; literal
CGT
TSEL 2075 2079 ; if test
LDC 1 ; literal (js: `s = 1;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2093 2093
LDC 0 ; literal (js: `if (dy < 0) {    ...`)
LD 0 1
CGT
TSEL 2083 2089 ; if test
LDC 0 ; (js: `s = -1;`) (js: `{                ...`)
LDC 1 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2093 2093
LDC 0 ; (js: `s = -2;`) (js: `{                ...`)
LDC 2 ; literal
SUB
ST 0 5
LD 2 6 ; (js: `if (vit === 1) { ...`)
LDC 1 ; literal
CEQ
TSEL 2097 2103 ; if test
LDC 0 ; literal (js: `return 0 - s;`) (js: `{                ...`)
LD 0 5
SUB
RTN
LDC 0 ; if-cons-jump
TSEL 2105 2105
LD 0 5 ; (js: `return s;`) (js: `{                ...`)
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDF 2113
AP 4
RTN
LD 1 0 ; (js: `if (typeof ds[1] ...`) (js: `{                ...`)
CDR
ATOM
TSEL 2117 2120 ; if test
LD 1 0 ; (js: `return ds[0];`) (js: `{                ...`)
CAR
RTN
LDC 0 ; literal (js: `var bestD = 0;`)
ST 0 0
LDC 0 ; (js: `var bestScore = -3;`)
LDC 3 ; literal
SUB
ST 0 1
LD 1 0 ; (js: `while (typeof ds ...`)
ATOM
LDC 0
CEQ
TSEL 2131 2164 ; while test
LD 1 0 ; (js: `var d = ds[0];`) (js: `{                ...`)
CAR
ST 0 2
LD 0 2 ; (js: `var val = ghostSt...`)
LD 2 1
AP 1
ST 0 3
LD 0 3 ; (js: `if (val > bestSco...`)
LD 0 1
CGT
LD 0 3
LD 0 1
CEQ
LD 8 26
AP 0
LDC 16384 ; literal
CGT
MUL
LDC 1
CEQ
ADD
LDC 0
CGT
TSEL 2155 2159 ; if test
LD 0 2 ; (js: `bestD = d;`) (js: `{                ...`)
ST 0 0
LD 0 3 ; (js: `bestScore = val;`)
ST 0 1
LD 1 0 ; (js: `ds = ds[1];`)
CDR
ST 1 0
LDC 0
TSEL 2126 2126
LD 0 0 ; (js: `return bestD;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDF 2174
AP 5
RTN
LD 6 20 ; (js: `var mz = matrixGe...`) (js: `{                ...`)
LD 2 7
LD 8 7
AP 2
ST 0 0
LDC 0 ; literal (js: `var ds = 0;`)
ST 0 1
LD 0 0 ; (js: `if (typeof mz ===...`)
ATOM
LDC 0
CEQ
TSEL 2186 2191 ; if test
LD 0 0 ; (js: `ds = listGet(mz, d);`) (js: `{                ...`)
LD 2 8
LD 8 0
AP 2
ST 0 1
LD 0 1 ; (js: `if (typeof ds ===...`)
ATOM
TSEL 2194 2363 ; if test
LD 2 8 ; (js: `var dl = d + 1;`) (js: `{                ...`)
LDC 1 ; literal
ADD
ST 0 2
LD 0 2 ; (js: `if (dl === 4)    ...`)
LDC 4 ; literal
CEQ
TSEL 2202 2204 ; if test
LDC 0 ; literal (js: `dl = 0;`)
ST 0 2
LD 2 8 ; (js: `var dr = d - 1;`)
LDC 1 ; literal
SUB
ST 0 3
LD 0 3 ; (js: `if (dr === -1)   ...`)
LDC 0
LDC 1 ; literal
SUB
CEQ
TSEL 2214 2216 ; if test
LDC 3 ; literal (js: `dr = 3;`)
ST 0 3
LD 2 8 ; (js: `var db = opposite...`)
LD 8 28
AP 1
ST 0 4
LD 6 9 ; (js: `if (matrixGet(map...`)
LD 2 7
LD 2 8
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2230 2286 ; if test
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{ // wall        ...`)
LD 2 7
LD 0 2
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2240 2262 ; if test
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 3
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2250 2256 ; if test
LD 0 4 ; (js: `ds = [db, 0];`) (js: `{                ...`)
LDC 0 ; literal
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2260 2260
LD 0 3 ; (js: `ds = [dr, 0];`) (js: `{                ...`)
LDC 0 ; literal
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2284 2284
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 3
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2272 2278 ; if test
LD 0 2 ; (js: `ds = [dl, 0];`) (js: `{                ...`)
LDC 0 ; literal
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2284 2284
LD 0 3 ; (js: `ds = [dr, [dl, 0]];`) (js: `{                ...`)
LD 0 2
LDC 0 ; literal
CONS
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2346 2346
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 2
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2296 2320 ; if test
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 3
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2306 2312 ; if test
LD 2 8 ; (js: `ds = [d, 0];`) (js: `{                ...`)
LDC 0 ; literal
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2318 2318
LD 2 8 ; (js: `ds = [d, [dr, 0]];`) (js: `{                ...`)
LD 0 3
LDC 0 ; literal
CONS
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2346 2346
LD 6 9 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 3
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2330 2338 ; if test
LD 2 8 ; (js: `ds = [d, [dl, 0]];`) (js: `{                ...`)
LD 0 2
LDC 0 ; literal
CONS
CONS
ST 0 1
LDC 0 ; if-cons-jump
TSEL 2346 2346
LD 2 8 ; (js: `ds = [d, [dl, [dr...`) (js: `{                ...`)
LD 0 2
LD 0 3
LDC 0 ; literal
CONS
CONS
CONS
ST 0 1
LD 0 0 ; (js: `if (typeof mz ===...`)
ATOM
TSEL 2349 2351 ; if test
LD 6 8 ; (js: `mz = _4FastList;`) (js: `{                ...`)
ST 0 0
LD 0 0 ; (js: `mz = listSet(mz, ...`)
LD 2 8
LD 0 1
LD 8 1
AP 3
ST 0 0
LD 6 20 ; (js: `maze = matrixSet(...`)
LD 2 7
LD 0 0
LD 8 6
AP 3
ST 6 20
LD 0 1 ; (js: `d = findGhostStra...`)
LD 2 2
AP 1
ST 2 8
LD 2 7 ; (js: `pos = shiftDir(po...`)
LD 2 8
LD 8 11
AP 2
ST 2 7
LD 2 0 ; (js: `handleCollision();`)
AP 0
ATOM
TSEL 2376 2376 ; cleanup
LDC 0 ; literal (js: `return 0;`)
RTN
