LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDC 0 ; init_ctx=19
LDC 0 ; init_ctx=20
LDC 0 ; init_ctx=21
LDC 0 ; init_ctx=22
LDC 0 ; init_ctx=23
LDC 0 ; init_ctx=24
LDC 0 ; init_ctx=25
LDC 0 ; init_ctx=26
LDC 0 ; init_ctx=27
LDC 0 ; init_ctx=28
LDC 0 ; init_ctx=29
LDC 0 ; init_ctx=30
LDF 34
AP 31
RTN
LDF 100 ; (js: `function listGet(...`) (js: `function listGet(...`)
ST 0 0
LDF 148 ; (js: `function listSet(...`)
ST 0 1
LDF 247 ; (js: `function listLeng...`)
ST 0 2
LDF 250 ; (js: `function slowList...`)
ST 0 3
LDF 272 ; (js: `function listFrom...`)
ST 0 4
LDF 292 ; (js: `function listIter...`)
ST 0 5
LDF 308 ; (js: `function matrixSe...`)
ST 0 6
LDF 324 ; (js: `function matrixGe...`)
ST 0 7
LDF 334 ; (js: `function matrixIt...`)
ST 0 8
LDF 347 ; (js: `function genList(...`)
ST 0 9
LDF 359 ; (js: `function genMatri...`)
ST 0 10
LDF 370 ; (js: `function shiftDir...`)
ST 0 11
LDF 421 ; (js: `function heapPop(...`)
ST 0 12
LDF 537 ; (js: `function heapSize...`)
ST 0 13
LDF 546 ; (js: `function heapPush...`)
ST 0 14
LDF 632 ; (js: `function heapSort...`)
ST 0 15
LDF 680 ; (js: `function flatRow(...`)
ST 0 16
LDF 695 ; (js: `function flatMatr...`)
ST 0 17
LDF 707 ; (js: `function flatAndS...`)
ST 0 18
LDF 719 ; (js: `function run(map,...`)
ST 0 19
LDF 720 ; (js: `function id(x, i)...`)
ST 0 20
LDF 722 ; (js: `function convertR...`)
ST 0 21
LDF 733 ; (js: `function matrixFr...`)
ST 0 22
LDF 738 ; (js: `function tplGet(t...`)
ST 0 23
LDF 774 ; (js: `function tplGette...`)
ST 0 24
LDF 782 ; (js: `function mod(n, d...`)
ST 0 25
LDF 790 ; (js: `function rand() {...`)
ST 0 26
LDF 803 ; (js: `function slowList...`)
ST 0 27
LDF 819 ; (js: `function opposite...`)
ST 0 28
LDF 833 ; (js: `function step(aiS...`)
ST 0 29
LDC 42 ; literal (js: `var _next = 42;`)
ST 0 30
LDC 0 ; literal (js: `[0, step];`)
LD 0 29
CONS
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 106
AP 3
RTN
LD 1 0 ; (js: `var size = list2[0];`) (js: `{    var size = l...`)
CAR
ST 0 0
LD 1 0 ; (js: `var list = list2[1];`)
CDR
ST 0 1
LDC 1 ; (js: `while (size !== 1...`)
LD 0 0
LDC 1 ; literal
CEQ
SUB
TSEL 118 146 ; while test
LD 0 0 ; (js: `m = (size / 2) | 0;`) (js: `{        m = (siz...`)
LDC 2 ; literal
DIV
ST 0 2
LD 0 2 ; (js: `if (n < m) {     ...`)
LD 1 1
CGT
TSEL 126 133 ; if test
LD 0 1 ; (js: `list = list[0];`) (js: `{            list...`)
CAR
ST 0 1
LD 0 2 ; (js: `size = m;`)
ST 0 0
LDC 0 ; if-cons-jump
TSEL 144 144
LD 0 1 ; (js: `list = list[1];`) (js: `{            list...`)
CDR
ST 0 1
LD 0 0 ; (js: `size = size - m;`)
LD 0 2
SUB
ST 0 0
LD 1 1 ; (js: `n = n - m;`)
LD 0 2
SUB
ST 1 1
LDC 0
TSEL 112 112
LD 0 1 ; (js: `return list;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDF 157
AP 6
RTN
LD 1 0 ; (js: `var size = list[0];`) (js: `{    var size = l...`)
CAR
ST 0 0
LD 0 0 ; (js: `var s = size;`)
ST 0 1
LD 1 0 ; (js: `list = list[1];`)
CDR
ST 1 0
LDC 0 ; literal (js: `var stack = 0;`)
ST 0 2
LD 0 1 ; (js: `while (s > 1) {  ...`)
LDC 1 ; literal
CGT
TSEL 171 213 ; while test
LD 0 1 ; (js: `var m = (s / 2) | 0;`) (js: `{        var m = ...`)
LDC 2 ; literal
DIV
ST 0 3
LD 0 3 ; (js: `if (n < m) {     ...`)
LD 1 1
CGT
TSEL 179 193 ; if test
LD 0 3 ; (js: `s = m;`) (js: `{            s = ...`)
ST 0 1
LDC 1 ; literal (js: `stack = [[1, list...`)
LD 1 0
CDR
CONS
LD 0 2
CONS
ST 0 2
LD 1 0 ; (js: `list = list[0];`)
CAR
ST 1 0
LDC 0 ; if-cons-jump
TSEL 211 211
LD 0 1 ; (js: `s = s - m;`) (js: `{            s = ...`)
LD 0 3
SUB
ST 0 1
LD 1 1 ; (js: `n = n - m;`)
LD 0 3
SUB
ST 1 1
LDC 0 ; literal (js: `stack = [[0, list...`)
LD 1 0
CAR
CONS
LD 0 2
CONS
ST 0 2
LD 1 0 ; (js: `list = list[1];`)
CDR
ST 1 0
LDC 0
TSEL 167 167
LD 1 2 ; (js: `var res = x;`)
ST 0 4
LD 0 2 ; (js: `while (typeof sta...`)
ATOM
LDC 0
CEQ
TSEL 220 243 ; while test
LD 0 2 ; (js: `var head = stack[0];`) (js: `{        var head...`)
CAR
ST 0 5
LD 0 5 ; (js: `if (head[0]) {   ...`)
CAR
TSEL 226 233 ; if test
LD 0 4 ; (js: `res = [res, head[...`) (js: `{            res ...`)
LD 0 5
CDR
CONS
ST 0 4
LDC 0 ; if-cons-jump
TSEL 238 238
LD 0 5 ; (js: `res = [head[1], r...`) (js: `{            res ...`)
CDR
LD 0 4
CONS
ST 0 4
LD 0 2 ; (js: `stack = stack[1];`)
CDR
ST 0 2
LDC 0
TSEL 215 215
LD 0 0 ; (js: `return [size, res];`)
LD 0 4
CONS
RTN
LD 0 0 ; (js: `return list[0];`) (js: `{    return list[...`)
CAR
RTN
LDC 0 ; init_ctx=0
LDF 254
AP 1
RTN
LDC 0 ; literal (js: `var n = 0;`) (js: `{    var n = 0;  ...`)
ST 0 0
LD 1 0 ; (js: `while (typeof lis...`)
ATOM
LDC 0
CEQ
TSEL 261 270 ; while test
LD 1 0 ; (js: `list = list[1];`) (js: `{        list = l...`)
CDR
ST 1 0
LD 0 0 ; (js: `n = n + 1;`)
LDC 1 ; literal
ADD
ST 0 0
LDC 0
TSEL 256 256
LD 0 0 ; (js: `return n;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 277
AP 2
RTN
LDF 1019 ; (js: `function _listFro...`) (js: `{    function _li...`)
ST 0 0
LD 1 0 ; (js: `var len = slowLis...`)
LD 2 3
AP 1
ST 0 1
LD 0 1 ; (js: `return [len, _lis...`)
LD 1 0
LD 0 1
LDC 0 ; literal
LD 0 0
AP 3
CAR
CONS
RTN
LDC 0 ; init_ctx=0
LDF 296
AP 1
RTN
LDF 1068 ; (js: `function _listIte...`) (js: `{    var i = 0;  ...`)
ST 0 0
LD 1 0 ; (js: `_listIterate(list...`)
CDR
LD 1 0
CAR
LDC 0 ; literal
LD 0 0
AP 3
ATOM
TSEL 307 307 ; cleanup
RTN
LD 0 0 ; (js: `return listSet(mx...`) (js: `{    return listS...`)
LD 0 1
CDR
LD 0 0
LD 0 1
CDR
LD 1 0
AP 2
LD 0 1
CAR
LD 0 2
LD 1 1
AP 3
LD 1 1
AP 3
RTN
LD 0 0 ; (js: `return listGet(li...`) (js: `{    return listG...`)
LD 0 1
CDR
LD 1 0
AP 2
LD 0 1
CAR
LD 1 0
AP 2
RTN
LDC 0 ; init_ctx=0
LDF 338
AP 1
RTN
LDF 1109 ; (js: `function rowItera...`) (js: `{    function row...`)
ST 0 0
LD 1 0 ; (js: `listIterate(mx, r...`)
LD 0 0
LD 2 5
AP 2
ATOM
TSEL 346 346 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 351
AP 1
RTN
LDF 1122 ; (js: `function _genList...`) (js: `{    function _ge...`)
ST 0 0
LD 1 0 ; (js: `return [n, _genLi...`)
LD 1 0
LD 0 0
AP 1
CONS
RTN
LDC 0 ; init_ctx=0
LDF 363
AP 1
RTN
LDF 1147 ; (js: `function genListF...`) (js: `{    function gen...`)
ST 0 0
LD 1 1 ; (js: `return genList(Y,...`)
LD 0 0
LD 2 9
AP 2
RTN
LD 0 1 ; (js: `if (d === 0) {   ...`) (js: `{    if (d === 0)...`)
LDC 0 ; literal
CEQ
TSEL 374 384 ; if test
LD 0 0 ; (js: `return [pos[0], p...`) (js: `{        return [...`)
CAR
LD 0 0
CDR
LDC 1 ; literal
SUB
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 420 420
LD 0 1 ; (js: `if (d === 1) {   ...`)
LDC 1 ; literal
CEQ
TSEL 388 398 ; if test
LD 0 0 ; (js: `return [pos[0] + ...`) (js: `{        return [...`)
CAR
LDC 1 ; literal
ADD
LD 0 0
CDR
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 420 420
LD 0 1 ; (js: `if (d === 2) {   ...`)
LDC 2 ; literal
CEQ
TSEL 402 412 ; if test
LD 0 0 ; (js: `return [pos[0], p...`) (js: `{        return [...`)
CAR
LD 0 0
CDR
LDC 1 ; literal
ADD
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 420 420
LD 0 0 ; (js: `return [pos[0] - ...`) (js: `{        return [...`)
CAR
LDC 1 ; literal
SUB
LD 0 0
CDR
CONS
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDF 432
AP 8
RTN
LD 1 0 ; (js: `var val = heap[0];`) (js: `{    var val = he...`)
CAR
ST 0 0
LD 0 0 ; (js: `var x = val[0];`)
CAR
ST 0 1
LD 0 0 ; (js: `var size = val[1];`)
CDR
ST 0 2
LD 1 0 ; (js: `var ptr = heap[1];`)
CDR
ST 0 3
LD 0 3 ; (js: `if (typeof ptr[0]...`)
CAR
ATOM
TSEL 448 462 ; if test
LD 0 3 ; (js: `if (typeof ptr[1]...`) (js: `{        if (type...`)
CDR
ATOM
TSEL 452 458 ; if test
LD 0 1 ; (js: `return [x, 0];`) (js: `{            retu...`)
LDC 0 ; literal
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 460 460
LDC 1 ; literal (js: `p = 1;`) (js: `{            p = ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 492 492
LD 0 3 ; (js: `if (typeof ptr[1]...`) (js: `{        if (type...`)
CDR
ATOM
TSEL 466 470 ; if test
LDC 0 ; literal (js: `p = 0;`) (js: `{            p = ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 492 492
LD 0 3 ; (js: `var x0 = ptr[0][0...`) (js: `{            var ...`)
CAR
CAR
CAR
ST 0 6
LD 0 3 ; (js: `var x1 = ptr[1][0...`)
CDR
CAR
CAR
ST 0 7
LD 0 7 ; (js: `if (x0[0] < x1[0]...`)
CAR
LD 0 6
CAR
CGT
TSEL 486 490 ; if test
LDC 0 ; literal (js: `p = 0;`) (js: `{                ...`)
ST 0 4
LDC 0 ; if-cons-jump
TSEL 492 492
LDC 1 ; literal (js: `p = 1;`) (js: `{                ...`)
ST 0 4
LD 0 4 ; (js: `if (p) {        r...`)
TSEL 494 516 ; if test
LD 0 3 ; (js: `res = heapPop(ptr...`) (js: `{        res = he...`)
CDR
LD 2 12
AP 1
ST 0 5
LD 0 1 ; (js: `return [x, [[res[...`)
LD 0 5
CAR
LD 0 2
LDC 1 ; literal
SUB
CONS
LD 0 3
CAR
LD 0 5
CDR
CONS
CONS
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 536 536
LD 0 3 ; (js: `res = heapPop(ptr...`) (js: `{        res = he...`)
CAR
LD 2 12
AP 1
ST 0 5
LD 0 1 ; (js: `return [x, [[res[...`)
LD 0 5
CAR
LD 0 2
LDC 1 ; literal
SUB
CONS
LD 0 5
CDR
LD 0 3
CDR
CONS
CONS
CONS
RTN
RTN
LD 0 0 ; (js: `if (typeof heap =...`) (js: `{    if (typeof h...`)
ATOM
TSEL 540 542 ; if test
LDC 0 ; literal (js: `return 0;`)
RTN
LD 0 0 ; (js: `return heap[0][1];`)
CAR
CDR
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDF 554
AP 5
RTN
LD 1 0 ; (js: `if (typeof heap =...`) (js: `{    if (typeof h...`)
ATOM
TSEL 557 565 ; if test
LD 1 1 ; (js: `return [[x, 1], [...`) (js: `{        return [...`)
LDC 1 ; literal
CONS
LDC 0 ; literal
LDC 0 ; literal
CONS
CONS
RTN
LD 1 0 ; (js: `var val = heap[0];`)
CAR
ST 0 0
LD 0 0 ; (js: `var y = val[0];`)
CAR
ST 0 1
LD 0 0 ; (js: `var size = val[1];`)
CDR
ST 0 2
LD 1 0 ; (js: `var ptr = heap[1];`)
CDR
ST 0 3
LD 0 1 ; (js: `if (x[0] < y[0]) ...`)
CAR
LD 1 1
CAR
CGT
TSEL 583 589 ; if test
LD 1 1 ; (js: `var z = x;`) (js: `{        var z = ...`)
ST 0 4
LD 0 1 ; (js: `x = y;`)
ST 1 1
LD 0 4 ; (js: `y = z;`)
ST 0 1
LD 0 3 ; (js: `if (heapSize(ptr[...`)
CAR
LD 2 13
AP 1
LD 0 3
CDR
LD 2 13
AP 1
CGT
TSEL 599 616 ; if test
LD 0 1 ; (js: `return [[y, size ...`) (js: `{        return [...`)
LD 0 2
LDC 1 ; literal
ADD
CONS
LD 0 3
CAR
LD 0 3
CDR
LD 1 1
LD 2 14
AP 2
CONS
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 631 631
LD 0 1 ; (js: `return [[y, size ...`) (js: `{        return [...`)
LD 0 2
LDC 1 ; literal
ADD
CONS
LD 0 3
CAR
LD 1 1
LD 2 14
AP 2
LD 0 3
CDR
CONS
CONS
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 638
AP 3
RTN
LDC 0 ; literal (js: `var heap = 0;`) (js: `{    // descendin...`)
ST 0 0
LD 1 0 ; (js: `while (typeof arr...`)
ATOM
LDC 0
CEQ
TSEL 645 656 ; while test
LD 0 0 ; (js: `heap = heapPush(h...`) (js: `{        heap = h...`)
LD 1 0
CAR
LD 2 14
AP 2
ST 0 0
LD 1 0 ; (js: `arr = arr[1];`)
CDR
ST 1 0
LDC 0
TSEL 640 640
LDC 0 ; literal (js: `var res = 0;`)
ST 0 1
LD 0 0 ; (js: `while (heapSize(h...`)
LD 2 13
AP 1
LDC 0 ; literal
CGT
TSEL 664 678 ; while test
LD 0 0 ; (js: `var pop = heapPop...`) (js: `{        var pop ...`)
LD 2 12
AP 1
ST 0 2
LD 0 2 ; (js: `res = [pop[0], res];`)
CAR
LD 0 1
CONS
ST 0 1
LD 0 2 ; (js: `heap = pop[1];`)
CDR
ST 0 0
LDC 0
TSEL 658 658
LD 0 1 ; (js: `return res;`)
RTN
LDC 0 ; init_ctx=0
LDF 684
AP 1
RTN
LDF 1152 ; (js: `function _flatRow...`) (js: `{    function _fl...`)
ST 0 0
LD 1 0 ; (js: `return _flatRow(r...`)
CDR
LDC 0 ; literal
LD 1 0
CAR
LD 1 2
LD 0 0
AP 4
RTN
LDC 0 ; init_ctx=0
LDF 699
AP 1
RTN
LDF 1190 ; (js: `function processR...`) (js: `{    function pro...`)
ST 0 0
LD 1 0 ; (js: `return flatRow(mx...`)
LD 0 0
LDC 0 ; literal
LD 2 16
AP 3
RTN
LDC 0 ; init_ctx=0
LDF 711
AP 1
RTN
LD 1 0 ; (js: `var val = flatMat...`) (js: `{    var val = fl...`)
LD 2 17
AP 1
ST 0 0
LD 0 0 ; (js: `return heapSort(v...`)
LD 2 15
AP 1
RTN
RTN
LD 0 0 ; (js: `return x;`) (js: `{    return x;}`)
RTN
LDC 0 ; init_ctx=0
LDF 726
AP 1
RTN
LD 1 0 ; (js: `var val = listFro...`) (js: `{    var val = li...`)
LD 2 20
LD 2 4
AP 2
ST 0 0
LD 0 0 ; (js: `return val;`)
RTN
LD 0 0 ; (js: `return listFromSl...`) (js: `{    return listF...`)
LD 1 21
LD 1 4
AP 2
RTN
LD 0 2 ; (js: `if(i === 0) {    ...`) (js: `{    if(i === 0) ...`)
LDC 0 ; literal
CEQ
TSEL 742 747 ; if test
LD 0 0 ; (js: `return tpl[0];`) (js: `{        return t...`)
CAR
RTN
LDC 0 ; if-cons-jump
TSEL 773 773
LD 0 2 ; (js: `if(i === 1 && len...`)
LDC 1 ; literal
CEQ
LD 0 1
LDC 2 ; literal
CEQ
MUL
LDC 1
CEQ
TSEL 757 762 ; if test
LD 0 0 ; (js: `return tpl[1];`) (js: `{        return t...`)
CDR
RTN
LDC 0 ; if-cons-jump
TSEL 773 773
LD 0 0 ; (js: `return tplGet(tpl...`) (js: `{        return t...`)
CDR
LD 0 1
LDC 1 ; literal
SUB
LD 0 2
LDC 1 ; literal
SUB
LD 1 23
AP 3
RTN
RTN
LDC 0 ; init_ctx=0
LDF 778
AP 1
RTN
LDF 1202 ; (js: `function getter(i...`) (js: `{    function get...`)
ST 0 0
LD 0 0 ; (js: `return getter;`)
RTN
LD 0 0 ; (js: `return n - ((n / ...`) (js: `{    return n - (...`)
LD 0 0
LD 0 1
DIV
LD 0 1
MUL
SUB
RTN
LD 1 30 ; (js: `_next = (_next * ...`) (js: `{    _next = (_ne...`)
LDC 1103515245 ; literal
MUL
LDC 12345 ; literal
ADD
ST 1 30
LD 1 30 ; (js: `return mod(((_nex...`)
LDC 65536 ; literal
DIV
LDC 32768 ; literal
LD 1 25
AP 2
RTN
LD 0 0 ; (js: `if (typeof list =...`) (js: `{    if (typeof l...`)
ATOM
TSEL 806 808 ; if test
LD 0 0 ; (js: `return list;`)
RTN
LD 0 0 ; (js: `return [f(list[0]...`)
CAR
LD 0 1
AP 1
LD 0 0
CDR
LD 0 1
LD 1 27
AP 2
CONS
RTN
LD 0 0 ; (js: `d = d + 2;`) (js: `{    d = d + 2;  ...`)
LDC 2 ; literal
ADD
ST 0 0
LD 0 0 ; (js: `if (d >= 4)      ...`)
LDC 4 ; literal
CGTE
TSEL 827 831 ; if test
LD 0 0 ; (js: `d = d - 4;`)
LDC 4 ; literal
SUB
ST 0 0
LD 0 0 ; (js: `return d;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDC 0 ; init_ctx=19
LDC 0 ; init_ctx=20
LDC 0 ; init_ctx=21
LDC 0 ; init_ctx=22
LDC 0 ; init_ctx=23
LDC 0 ; init_ctx=24
LDF 861
AP 25
RTN
LDF 1208 ; (js: `function convertM...`) (js: `{    worldState =...`)
ST 0 0
LDF 1222 ; (js: `function canGo(po...`)
ST 0 1
LDF 1271 ; (js: `function bounty(p...`)
ST 0 2
LDF 1320 ; (js: `function genPath(...`)
ST 0 3
LDF 1324 ; (js: `function genSmell...`)
ST 0 4
LDF 1326 ; (js: `function calcPath...`)
ST 0 5
LDF 1571 ; (js: `function calcSmel...`)
ST 0 6
LD 1 1 ; (js: `worldState = tplG...`)
LDC 4 ; literal
LD 2 24
AP 2
ST 1 1
LDC 0 ; literal (js: `var map = worldSt...`)
LD 1 1
AP 1
ST 0 7
LDC 1 ; literal
LD 1 1
AP 1
LDC 5 ; literal
LD 2 24
AP 2
ST 0 8
LDC 0 ; literal
LD 0 8
AP 1
ST 0 9
LDC 2 ; literal
LD 1 1
AP 1
ST 0 10
LDC 3 ; literal
LD 1 1
AP 1
ST 0 11
LDC 0 ; literal
ST 0 12
LD 0 7 ; (js: `map = listFromSlo...`)
LD 0 0
LD 2 4
AP 2
ST 0 7
LD 0 12 ; (js: `ghostsStartingPos...`)
LD 2 20
LD 2 4
AP 2
ST 0 12
LD 0 7 ; (js: `var Y = listLengt...`)
LD 2 2
AP 1
ST 0 13
LD 0 7 ; (js: `var X = listLengt...`)
LDC 0 ; literal
LD 2 0
AP 2
LD 2 2
AP 1
ST 0 14
LD 0 14 ; (js: `var paths = genMa...`)
LD 0 13
LD 0 3
LD 2 10
AP 3
ST 0 15
LDC 0 ; literal
ST 0 16
LD 0 14 ; (js: `var smell = genMa...`)
LD 0 13
LD 0 4
LD 2 10
AP 3
ST 0 17
LDC 1 ; literal (js: `var myPos = lmSta...`)
LD 0 8
AP 1
ST 0 18
LD 0 18 ; (js: `var myOrigPos = m...`)
ST 0 19
LD 0 5 ; (js: `calcPaths();`)
AP 0
ATOM
TSEL 950 950 ; cleanup
LD 0 6 ; (js: `calcSmell();`)
AP 0
ATOM
TSEL 954 954 ; cleanup
LDC 0 ; literal (js: `var d = 0;`)
ST 0 20
LDC 0 ; (js: `var bestSmell = -1;`)
LDC 1 ; literal
SUB
ST 0 21
LDC 0 ; literal (js: `var bestD = 0;`)
ST 0 22
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 20
CGT
TSEL 966 1011 ; while test
LD 0 19 ; (js: `var xxx = shiftDi...`) (js: `{        var xxx ...`)
LD 0 20
LD 2 11
AP 2
ST 0 23
LD 0 17 ; (js: `var val = matrixG...`)
LD 0 23
LD 2 7
AP 2
ST 0 24
LD 0 23 ; (js: `if (canGo(xxx) > ...`)
LD 0 1
AP 1
LDC 0 ; literal
CGT
LD 0 24
LD 0 21
CGT
LD 0 24
LD 0 21
CEQ
LD 2 26
AP 0
LDC 16384 ; literal
CGT
MUL
LDC 1
CEQ
ADD
LDC 0
CGT
MUL
LDC 1
CEQ
TSEL 1001 1005 ; if test
LD 0 24 ; (js: `bestSmell = val;`) (js: `{            best...`)
ST 0 21
LD 0 20 ; (js: `bestD = d;`)
ST 0 22
LD 0 20 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 20
LDC 0
TSEL 962 962
LD 0 15 ; (js: `return [[paths, [...`)
LD 0 17
LD 0 7
CONS
CONS
LD 0 22
CONS
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 1025
AP 3
RTN
LD 1 1 ; (js: `if (n === 1) {   ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1029 1038 ; if test
LD 1 0 ; (js: `return [f(arr[0],...`) (js: `{            retu...`)
CAR
LD 1 2
LD 3 1
AP 2
LD 1 0
CDR
CONS
RTN
LD 1 1 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `var left = _listF...`)
LD 0 0
LD 1 2
LD 2 0
AP 3
ST 0 1
LD 0 1 ; (js: `var right = _list...`)
CDR
LD 1 1
LD 0 0
SUB
LD 1 2
LD 0 0
ADD
LD 2 0
AP 3
ST 0 2
LD 0 1 ; (js: `return [[left[0],...`)
CAR
LD 0 2
CAR
CONS
LD 0 2
CDR
CONS
RTN
LDC 0 ; init_ctx=0
LDF 1072
AP 1
RTN
LD 1 1 ; (js: `if(length === 1) ...`) (js: `{        if(lengt...`)
LDC 1 ; literal
CEQ
TSEL 1076 1084 ; if test
LD 1 0 ; (js: `f(list, i);`) (js: `{            f(li...`)
LD 1 2
LD 3 1
AP 2
ATOM
TSEL 1082 1082 ; cleanup
LDC 0 ; if-cons-jump
TSEL 1108 1108
LD 1 1 ; (js: `var halfLength = ...`) (js: `{            var ...`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `_listIterate(list...`)
CAR
LD 0 0
LD 1 2
LD 2 0
AP 3
ATOM
TSEL 1096 1096 ; cleanup
LD 1 0 ; (js: `_listIterate(list...`)
CDR
LD 1 1
LD 0 0
SUB
LD 1 2
LD 0 0
ADD
LD 2 0
AP 3
ATOM
TSEL 1108 1108 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 1113
AP 1
RTN
LDF 1693 ; (js: `function cellIter...`) (js: `{        function...`)
ST 0 0
LD 1 0 ; (js: `listIterate(row, ...`)
LD 0 0
LD 4 5
AP 2
ATOM
TSEL 1121 1121 ; cleanup
RTN
LDC 0 ; init_ctx=0
LDF 1126
AP 1
RTN
LD 1 0 ; (js: `if (n === 1)     ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1130 1133 ; if test
LD 3 1 ; (js: `return f();`)
AP 0
RTN
LD 1 0 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 0 0 ; (js: `return [ _genList...`)
LD 2 0
AP 1
LD 1 0
LD 0 0
SUB
LD 2 0
AP 1
CONS
RTN
LD 2 0 ; (js: `return genList(X,...`) (js: `{        return g...`)
LD 2 2
LD 3 9
AP 2
RTN
LDC 0 ; init_ctx=0
LDF 1156
AP 1
RTN
LD 1 2 ; (js: `if (n === 1) {   ...`) (js: `{        if (n ==...`)
LDC 1 ; literal
CEQ
TSEL 1160 1166 ; if test
LD 1 1 ; (js: `return f(x, row, a);`) (js: `{            retu...`)
LD 1 0
LD 1 3
LD 3 1
AP 3
RTN
LD 1 2 ; (js: `var m = (n / 2) | 0;`)
LDC 2 ; literal
DIV
ST 0 0
LD 1 0 ; (js: `a = _flatRow(row[...`)
CDR
LD 1 1
LD 0 0
ADD
LD 1 2
LD 0 0
SUB
LD 1 3
LD 2 0
AP 4
ST 1 3
LD 1 0 ; (js: `return _flatRow(r...`)
CAR
LD 1 1
LD 0 0
LD 1 3
LD 2 0
AP 4
RTN
LDC 0 ; init_ctx=0
LDF 1194
AP 1
RTN
LDF 1701 ; (js: `function processC...`) (js: `{        function...`)
ST 0 0
LD 1 1 ; (js: `return flatRow(d,...`)
LD 0 0
LD 1 2
LD 4 16
AP 3
RTN
LD 2 0 ; (js: `return tplGet(tpl...`) (js: `{        return t...`)
LD 2 1
LD 0 0
LD 3 23
AP 3
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 1213
AP 2
RTN
LDF 1718 ; (js: `function convertM...`) (js: `{        function...`)
ST 0 0
LD 1 0 ; (js: `var val = listFro...`)
LD 0 0
LD 4 4
AP 2
ST 0 1
LD 0 1 ; (js: `return val;`)
RTN
LDC 0 ; init_ctx=0
LDF 1226
AP 1
RTN
LD 2 7 ; (js: `var cell = matrix...`) (js: `{        var cell...`)
LD 1 0
LD 4 7
AP 2
ST 0 0
LD 0 0 ; (js: `if (cell === 1 ||...`)
LDC 1 ; literal
CEQ
LD 0 0
LDC 5 ; literal
CEQ
ADD
LDC 0
CGT
LD 0 0
LDC 6 ; literal
CEQ
ADD
LDC 0
CGT
TSEL 1247 1249 ; if test
LDC 127 ; literal (js: `return 127;`)
RTN
LD 0 0 ; (js: `if (cell === 2 ||...`)
LDC 2 ; literal
CEQ
LD 0 0
LDC 3 ; literal
CEQ
ADD
LDC 0
CGT
LD 0 0
LDC 4 ; literal
CEQ
ADD
LDC 0
CGT
TSEL 1265 1267 ; if test
LDC 137 ; literal (js: `return 137;`)
RTN
LDC 0 ; (js: `return -1;`)
LDC 1 ; literal
SUB
RTN
LDC 0 ; init_ctx=0
LDF 1275
AP 1
RTN
LD 2 7 ; (js: `var cell = matrix...`) (js: `{        var cell...`)
LD 1 0
LD 4 7
AP 2
ST 0 0
LD 0 0 ; (js: `if (cell === 2)  ...`)
LDC 2 ; literal
CEQ
TSEL 1284 1286 ; if test
LDC 10000 ; literal (js: `return 1e4;`)
RTN
LD 0 0 ; (js: `if (cell === 3) {...`)
LDC 3 ; literal
CEQ
TSEL 1290 1306 ; if test
LD 2 9 ; (js: `if (lmVitality > ...`) (js: `{            if (...`)
LD 1 1
CGT
TSEL 1294 1298 ; if test
LDC 0 ; literal (js: `return 0;`) (js: `{                ...`)
RTN
LDC 0 ; if-cons-jump
TSEL 1306 1306
LD 2 11 ; (js: `if (fruitStatus >...`) (js: `{                ...`)
LDC 0 ; literal
CGT
TSEL 1302 1304 ; if test
LDC 500000 ; literal (js: `return 5e5;`)
RTN
LDC 50000 ; literal (js: `return 5e4;`)
RTN
LD 0 0 ; (js: `if (cell === 4 &&...`)
LDC 4 ; literal
CEQ
LD 2 11
LDC 0 ; literal
CGT
MUL
LDC 1
CEQ
TSEL 1316 1318 ; if test
LDC 1000000 ; literal (js: `return 1e6;`)
RTN
LDC 100 ; literal (js: `return 1e2;`)
RTN
LDC 0 ; (js: `return -1;`) (js: `{        return -...`)
LDC 1 ; literal
SUB
RTN
LDC 0 ; literal (js: `return 0;`) (js: `{        return 0...`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDC 0 ; init_ctx=11
LDC 0 ; init_ctx=12
LDC 0 ; init_ctx=13
LDC 0 ; init_ctx=14
LDC 0 ; init_ctx=15
LDC 0 ; init_ctx=16
LDC 0 ; init_ctx=17
LDC 0 ; init_ctx=18
LDF 1348
AP 19
RTN
LDF 1730 ; (js: `function prepareG...`) (js: `{        paths = ...`)
ST 0 0
LD 2 15 ; (js: `paths = matrixSet...`)
LD 2 18
LDC 0 ; literal
LD 4 6
AP 3
ST 2 15
LDC 0 ; literal (js: `flatPaths = [[0, ...`)
LD 2 18
CONS
LD 2 16
CONS
ST 2 16
LDC 0 ; literal (js: `var toDo = 0;`)
ST 0 2
LD 2 10 ; (js: `var ghs = prepare...`)
LD 0 0
AP 1
ST 0 3
LD 2 9 ; (js: `var myStatus = [l...`)
LDC 0 ; literal
CONS
ST 0 4
LD 2 18 ; (js: `var state = [myPo...`)
LD 0 3
LD 0 4
CONS
CONS
ST 0 5
LD 0 2 ; (js: `toDo = heapPush(t...`)
LDC 0 ; literal
LD 0 5
CONS
LD 4 14
AP 2
ST 0 2
LDC 0 ; literal (js: `var heapOps = 0;`)
ST 0 6
LD 0 2 ; (js: `while (heapSize(t...`)
LD 4 13
AP 1
LDC 0 ; literal
CGT
LD 0 6
LDC 195 ; literal
CGT
ADD
LDC 0
CGT
TSEL 1399 1567 ; while test
LD 0 6 ; (js: `heapOps = heapOps...`) (js: `{            heap...`)
LDC 1 ; literal
ADD
ST 0 6
LD 0 2 ; (js: `var popRes = heap...`)
LD 4 12
AP 1
ST 0 7
LD 0 7 ; (js: `var state = popRe...`)
CAR
ST 0 5
LD 0 5 ; (js: `var t = state[0];`)
CAR
ST 0 8
LD 0 5 ; (js: `state = state[1];`)
CDR
ST 0 5
LD 0 5 ; (js: `myPos = state[0];`)
CAR
ST 2 18
LD 0 5 ; (js: `state = state[1];`)
CDR
ST 0 5
LD 0 5 ; (js: `ghs = state[0];`)
CAR
ST 0 3
LD 0 5 ; (js: `myStatus = state[1];`)
CDR
ST 0 4
LD 0 4 ; (js: `var myVitality = ...`)
CAR
ST 0 9
LD 0 7 ; (js: `toDo = popRes[1];`)
CDR
ST 0 2
LDC 127 ; literal (js: `if (t < 127 * 30)...`)
LDC 30 ; literal
MUL
LD 0 8
CGT
TSEL 1440 1565 ; if test
LDC 0 ; literal (js: `var d = 0;`) (js: `{                ...`)
ST 0 10
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 10
CGT
TSEL 1446 1565 ; while test
LD 2 18 ; (js: `var newPos = shif...`) (js: `{                ...`)
LD 0 10
LD 4 11
AP 2
ST 0 11
LD 0 11 ; (js: `var dt = canGo(ne...`)
LD 2 1
AP 1
ST 0 12
LD 0 12 ; (js: `if (dt >= 0 && ma...`)
LDC 0 ; literal
CGTE
LD 2 15
LD 0 11
LD 4 7
AP 2
LDC 0
LDC 1 ; literal
SUB
CEQ
MUL
LDC 1
CEQ
TSEL 1470 1559 ; if test
LDF 1746 ; (js: `function updateGh...`) (js: `{                ...`)
ST 0 1
LDC 0 ; literal (js: `var frighten = 0;`)
ST 0 13
LD 0 9 ; (js: `var myNewVitality...`)
ST 0 14
LD 2 7 ; (js: `if (matrixGet(map...`)
LD 0 11
LD 4 7
AP 2
LDC 3 ; literal
CEQ
TSEL 1483 1493 ; if test
LD 0 9 ; (js: `if (!myVitality) ...`) (js: `{                ...`)
LDC 0
CEQ
TSEL 1487 1489 ; if test
LDC 1 ; literal (js: `frighten = 1;`) (js: `{                ...`)
ST 0 13
LDC 127 ; literal (js: `myNewVitality = 1...`)
LDC 20 ; literal
MUL
ST 0 14
LDC 1 ; literal (js: `var alive = 1;`)
ST 0 15
LDC 0 ; literal (js: `var scoreBonus = 0;`)
ST 0 16
LD 0 3 ; (js: `var newGhs = slow...`)
LD 0 1
LD 4 27
AP 2
ST 0 17
LD 0 16 ; (js: `if (scoreBonus) {...`)
TSEL 1504 1510 ; if test
LD 2 17 ; (js: `smell = matrixSet...`) (js: `{                ...`)
LD 0 11
LD 0 16
LD 4 6
AP 3
ST 2 17
LD 2 15 ; (js: `paths = matrixSet...`)
LD 0 11
LD 0 8
LD 0 12
ADD
LD 4 6
AP 3
ST 2 15
LD 0 8 ; (js: `flatPaths = [[t +...`)
LD 0 12
ADD
LD 0 11
CONS
LD 2 16
CONS
ST 2 16
LD 0 15 ; (js: `if (alive) {     ...`)
TSEL 1528 1557 ; if test
LD 0 14 ; (js: `myNewVitality = m...`) (js: `{                ...`)
LD 0 12
SUB
ST 0 14
LDC 0 ; literal (js: `if (myNewVitality...`)
LD 0 14
CGT
TSEL 1536 1538 ; if test
LDC 0 ; literal (js: `myNewVitality = 0;`)
ST 0 14
LD 0 14 ; (js: `var myNewStatus =...`)
LDC 0 ; literal
CONS
ST 0 18
LD 0 2 ; (js: `toDo = heapPush(t...`)
LD 0 8
LD 0 12
ADD
LD 0 11
LD 0 17
LD 0 18
CONS
CONS
CONS
LD 4 14
AP 2
ST 0 2
LDC 0 ; if-cons-jump
TSEL 1559 1559
LDC 1 ; literal (js: `alive = 1;`) (js: `{                ...`)
ST 0 15
LD 0 10 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 10
LDC 0
TSEL 1442 1442
LDC 0
TSEL 1387 1387
LD 0 6 ; (js: `console.log(heapO...`)
DBUG
LDC 0 ; literal (js: `return 0;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDF 1583
AP 9
RTN
LD 2 16 ; (js: `var sortedPaths =...`) (js: `{        var sort...`)
LD 4 15
AP 1
ST 0 0
LD 0 0 ; (js: `while (typeof sor...`)
ATOM
LDC 0
CEQ
TSEL 1592 1691 ; while test
LD 0 0 ; (js: `var pos = sortedP...`) (js: `{            var ...`)
CAR
CDR
ST 0 1
LD 2 15 ; (js: `var t0 = matrixGe...`)
LD 0 1
LD 4 7
AP 2
ST 0 2
LD 2 17 ; (js: `var myVal = matri...`)
LD 0 1
LD 4 7
AP 2
LD 0 1
LD 0 2
LD 2 2
AP 2
ADD
ST 0 3
LD 2 17 ; (js: `smell = matrixSet...`)
LD 0 1
LD 0 3
LD 4 6
AP 3
ST 2 17
LDC 0 ; literal (js: `var d = 0;`)
ST 0 4
LDC 4 ; literal (js: `while (d < 4) {  ...`)
LD 0 4
CGT
TSEL 1623 1686 ; while test
LD 0 1 ; (js: `var newPos = shif...`) (js: `{                ...`)
LD 0 4
LD 4 11
AP 2
ST 0 5
LD 0 5 ; (js: `if (canGo(newPos)...`)
LD 2 1
AP 1
LDC 0 ; literal
CGT
TSEL 1634 1680 ; if test
LD 2 15 ; (js: `var t = matrixGet...`) (js: `{                ...`)
LD 0 5
LD 4 7
AP 2
ST 0 6
LD 0 6 ; (js: `if (t === t0 - 12...`)
LD 0 2
LDC 127 ; literal
SUB
CEQ
LD 0 6
LD 0 2
LDC 137 ; literal
SUB
CEQ
ADD
LDC 0
CGT
TSEL 1653 1680 ; if test
LD 0 3 ; (js: `var newVal = (myV...`) (js: `{                ...`)
LDC 8 ; literal
MUL
LDC 10 ; literal
DIV
ST 0 7
LD 2 17 ; (js: `var oldVal = matr...`)
LD 0 5
LD 4 7
AP 2
ST 0 8
LD 0 8 ; (js: `if (oldVal === 0 ...`)
LDC 0 ; literal
CEQ
LD 0 7
LD 0 8
CGT
ADD
LDC 0
CGT
TSEL 1674 1680 ; if test
LD 2 17 ; (js: `smell = matrixSet...`) (js: `{                ...`)
LD 0 5
LD 0 7
LD 4 6
AP 3
ST 2 17
LD 0 4 ; (js: `d = d + 1;`)
LDC 1 ; literal
ADD
ST 0 4
LDC 0
TSEL 1619 1619
LD 0 0 ; (js: `sortedPaths = sor...`)
CDR
ST 0 0
LDC 0
TSEL 1587 1587
LDC 0 ; literal (js: `return 0;`)
RTN
LD 0 0 ; (js: `f(v, i, j);`) (js: `{            f(v,...`)
LD 2 1
LD 0 1
LD 4 1
AP 3
ATOM
TSEL 1700 1700 ; cleanup
RTN
LD 0 1 ; (js: `if (r >= 0) {    ...`) (js: `{            if (...`)
LDC 0 ; literal
CGTE
TSEL 1705 1715 ; if test
LD 0 1 ; (js: `return [[r, [x, y...`) (js: `{                ...`)
LD 0 0
LD 2 0
CONS
CONS
LD 0 2
CONS
RTN
LDC 0 ; if-cons-jump
TSEL 1717 1717
LD 0 2 ; (js: `return tail;`) (js: `{                ...`)
RTN
RTN
LD 0 0 ; (js: `if (x === 6) {   ...`) (js: `{            if (...`)
LDC 6 ; literal
CEQ
TSEL 1722 1728 ; if test
LD 0 1 ; (js: `ghostsStartingPos...`) (js: `{                ...`)
LD 2 1
CONS
LD 3 12
CONS
ST 3 12
LD 0 0 ; (js: `return x;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDF 1735
AP 2
RTN
LDF 1868 ; (js: `function prepareG...`) (js: `{            var ...`)
ST 0 0
LDC 0 ; (js: `var id = -1;`)
LDC 1 ; literal
SUB
ST 0 1
LD 4 10 ; (js: `return slowListMa...`)
LD 0 0
LD 6 27
AP 2
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDC 0 ; init_ctx=6
LDC 0 ; init_ctx=7
LDC 0 ; init_ctx=8
LDC 0 ; init_ctx=9
LDC 0 ; init_ctx=10
LDF 1760
AP 11
RTN
LDF 1878 ; (js: `function handleCo...`) (js: `{                ...`)
ST 0 0
LDF 1923 ; (js: `function ghostStr...`)
ST 0 1
LDF 2060 ; (js: `function findGhos...`)
ST 0 2
LDF 2113 ; (js: `function handleMo...`)
ST 0 3
LD 1 0 ; (js: `var gi = state[0];`)
CAR
ST 0 4
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var gt = state[0];`)
CAR
ST 0 5
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var vit = state[0];`)
CAR
ST 0 6
LD 1 0 ; (js: `state = state[1];`)
CDR
ST 1 0
LD 1 0 ; (js: `var pos = state[0];`)
CAR
ST 0 7
LD 1 0 ; (js: `var d = state[1];`)
CDR
ST 0 8
LD 2 13 ; (js: `if (frighten) {  ...`)
TSEL 1794 1802 ; if test
LDC 1 ; literal (js: `vit = 1;`) (js: `{                ...`)
ST 0 6
LD 0 8 ; (js: `d = oppositeDir(d);`)
LD 6 28
AP 1
ST 0 8
LDC 0 ; if-cons-jump
TSEL 1812 1812
LD 0 6 ; (js: `if (vit && myNewV...`)
LD 2 14
LDC 0 ; literal
CEQ
MUL
LDC 1
CEQ
TSEL 1810 1812 ; if test
LDC 0 ; literal (js: `vit = 0;`) (js: `{                ...`)
ST 0 6
LD 0 0 ; (js: `handleCollision();`)
AP 0
ATOM
TSEL 1816 1816 ; cleanup
LD 2 8 ; (js: `if (gt < t + dt) ...`)
LD 2 12
ADD
LD 0 5
CGT
TSEL 1822 1858 ; if test
LD 0 3 ; (js: `handleMove();`) (js: `{                ...`)
AP 0
ATOM
TSEL 1826 1826 ; cleanup
LD 0 4 ; (js: `var gn = gi;`)
ST 0 9
LD 0 9 ; (js: `while(gn > 4) gn ...`)
LDC 4 ; literal
CGT
TSEL 1832 1838 ; while test
LD 0 9 ; (js: `gn = gn - 4;`)
LDC 4 ; literal
SUB
ST 0 9
LDC 0
TSEL 1828 1828
LD 0 6 ; (js: `if (vit) { // fri...`)
TSEL 1840 1848 ; if test
LDC 195 ; literal (js: `gdt = 195 + (gn *...`) (js: `{ // frightened o...`)
LD 0 9
LDC 3 ; literal
MUL
ADD
ST 0 10
LDC 0 ; if-cons-jump
TSEL 1854 1854
LDC 130 ; literal (js: `gdt = 130 + (gn *...`) (js: `{                ...`)
LD 0 9
LDC 2 ; literal
MUL
ADD
ST 0 10
LD 0 5 ; (js: `gt = gt + gdt;`)
LD 0 10
ADD
ST 0 5
LD 0 4 ; (js: `return [gi, [gt, ...`)
LD 0 5
LD 0 6
LD 0 7
LD 0 8
CONS
CONS
CONS
CONS
RTN
LD 1 1 ; (js: `id = id + 1;`) (js: `{                ...`)
LDC 1 ; literal
ADD
ST 1 1
LD 1 1 ; (js: `return [id, [1, g...`)
LDC 1 ; literal
LD 0 0
CONS
CONS
RTN
LD 1 7 ; (js: `if (pos[0] === ne...`) (js: `{                ...`)
CAR
LD 3 11
CAR
CEQ
LD 1 7
CDR
LD 3 11
CDR
CEQ
MUL
LDC 1
CEQ
TSEL 1892 1921 ; if test
LD 1 6 ; (js: `if (vit === 0) { ...`) (js: `{                ...`)
LDC 0 ; literal
CEQ
TSEL 1896 1904 ; if test
LDC 0 ; literal (js: `alive = 0;`) (js: `{                ...`)
ST 3 15
LDC 0 ; (js: `scoreBonus = -1e4;`)
LDC 10000 ; literal
SUB
ST 3 16
LDC 0 ; if-cons-jump
TSEL 1921 1921
LD 1 6 ; (js: `if (vit === 1) { ...`)
LDC 1 ; literal
CEQ
TSEL 1908 1921 ; if test
LD 5 12 ; (js: `pos = listGet(gho...`) (js: `{                ...`)
LD 1 4
LD 7 0
AP 2
ST 1 7
LDC 2 ; literal (js: `vit = 2;`)
ST 1 6
LDC 2 ; literal (js: `d = 2;`)
ST 1 8
LD 3 16 ; (js: `scoreBonus = scor...`)
LDC 200000 ; literal
ADD
ST 3 16
LDC 0 ; literal (js: `return 0;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDC 0 ; init_ctx=4
LDC 0 ; init_ctx=5
LDF 1932
AP 6
RTN
LDC 0 ; literal (js: `d = shiftDir([0,0...`) (js: `{                ...`)
LDC 0 ; literal
CONS
LD 1 0
LD 8 11
AP 2
ST 1 0
LD 1 0 ; (js: `var dx = d[0];`)
CAR
ST 0 0
LD 1 0 ; (js: `var dy = d[1];`)
CDR
ST 0 1
LD 4 11 ; (js: `var dX = newPos[0...`)
CAR
LD 2 7
CAR
SUB
ST 0 2
LD 4 11 ; (js: `var dY = newPos[1...`)
CDR
LD 2 7
CDR
SUB
ST 0 3
LDC 0 ; literal (js: `if (dX < 0) {    ...`)
LD 0 2
CGT
TSEL 1961 1969 ; if test
LDC 0 ; literal (js: `dX = 0 - dX;`) (js: `{                ...`)
LD 0 2
SUB
ST 0 2
LDC 0 ; literal (js: `dx = 0 - dx;`)
LD 0 0
SUB
ST 0 0
LDC 0 ; literal (js: `if (dY < 0) {    ...`)
LD 0 3
CGT
TSEL 1973 1981 ; if test
LDC 0 ; literal (js: `dY = 0 - dY;`) (js: `{                ...`)
LD 0 3
SUB
ST 0 3
LDC 0 ; literal (js: `dy = 0 - dy;`)
LD 0 1
SUB
ST 0 1
LD 0 3 ; (js: `if (dX < dY) {   ...`)
LD 0 2
CGT
TSEL 1985 2017 ; if test
LD 0 1 ; (js: `if (dy > 0) {    ...`) (js: `{                ...`)
LDC 0 ; literal
CGT
TSEL 1989 1993 ; if test
LDC 2 ; literal (js: `s = 2;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2015 2015
LD 0 0 ; (js: `if (dx > 0) {    ...`)
LDC 0 ; literal
CGT
TSEL 1997 2001 ; if test
LDC 1 ; literal (js: `s = 1;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2015 2015
LDC 0 ; literal (js: `if (dx < 0) {    ...`)
LD 0 0
CGT
TSEL 2005 2011 ; if test
LDC 0 ; (js: `s = -1;`) (js: `{                ...`)
LDC 1 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2015 2015
LDC 0 ; (js: `s = -2;`) (js: `{                ...`)
LDC 2 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2047 2047
LD 0 0 ; (js: `if (dx > 0) {    ...`) (js: `{                ...`)
LDC 0 ; literal
CGT
TSEL 2021 2025 ; if test
LDC 2 ; literal (js: `s = 2;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2047 2047
LD 0 1 ; (js: `if (dy > 0) {    ...`)
LDC 0 ; literal
CGT
TSEL 2029 2033 ; if test
LDC 1 ; literal (js: `s = 1;`) (js: `{                ...`)
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2047 2047
LDC 0 ; literal (js: `if (dy < 0) {    ...`)
LD 0 1
CGT
TSEL 2037 2043 ; if test
LDC 0 ; (js: `s = -1;`) (js: `{                ...`)
LDC 1 ; literal
SUB
ST 0 5
LDC 0 ; if-cons-jump
TSEL 2047 2047
LDC 0 ; (js: `s = -2;`) (js: `{                ...`)
LDC 2 ; literal
SUB
ST 0 5
LD 2 6 ; (js: `if (vit === 1) { ...`)
LDC 1 ; literal
CEQ
TSEL 2051 2057 ; if test
LDC 0 ; literal (js: `return 0 - s;`) (js: `{                ...`)
LD 0 5
SUB
RTN
LDC 0 ; if-cons-jump
TSEL 2059 2059
LD 0 5 ; (js: `return s;`) (js: `{                ...`)
RTN
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDC 0 ; init_ctx=3
LDF 2067
AP 4
RTN
LDC 0 ; literal (js: `var bestD = 0;`) (js: `{                ...`)
ST 0 0
LDC 0 ; (js: `var bestScore = -3;`)
LDC 3 ; literal
SUB
ST 0 1
LD 1 0 ; (js: `while (typeof ds ...`)
ATOM
LDC 0
CEQ
TSEL 2078 2111 ; while test
LD 1 0 ; (js: `var d = ds[0];`) (js: `{                ...`)
CAR
ST 0 2
LD 0 2 ; (js: `var val = ghostSt...`)
LD 2 1
AP 1
ST 0 3
LD 0 3 ; (js: `if (val > bestSco...`)
LD 0 1
CGT
LD 0 3
LD 0 1
CEQ
LD 8 26
AP 0
LDC 16384 ; literal
CGT
MUL
LDC 1
CEQ
ADD
LDC 0
CGT
TSEL 2102 2106 ; if test
LD 0 2 ; (js: `bestD = d;`) (js: `{                ...`)
ST 0 0
LD 0 3 ; (js: `bestScore = val;`)
ST 0 1
LD 1 0 ; (js: `ds = ds[1];`)
CDR
ST 1 0
LDC 0
TSEL 2073 2073
LD 0 0 ; (js: `return bestD;`)
RTN
LDC 0 ; init_ctx=0
LDC 0 ; init_ctx=1
LDC 0 ; init_ctx=2
LDF 2119
AP 3
RTN
LD 2 8 ; (js: `var dl = d + 1;`) (js: `{                ...`)
LDC 1 ; literal
ADD
ST 0 0
LD 0 0 ; (js: `if (dl === 4)    ...`)
LDC 4 ; literal
CEQ
TSEL 2127 2129 ; if test
LDC 0 ; literal (js: `dl = 0;`)
ST 0 0
LD 2 8 ; (js: `var dr = d - 1;`)
LDC 1 ; literal
SUB
ST 0 1
LD 0 0 ; (js: `if (dl === -1)   ...`)
LDC 0
LDC 1 ; literal
SUB
CEQ
TSEL 2139 2141 ; if test
LDC 3 ; literal (js: `dl = 3;`)
ST 0 0
LD 2 8 ; (js: `var db = opposite...`)
LD 8 28
AP 1
ST 0 2
LD 6 7 ; (js: `if (matrixGet(map...`)
LD 2 7
LD 2 8
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2155 2207 ; if test
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{ // wall        ...`)
LD 2 7
LD 0 0
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2165 2183 ; if test
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 1
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2175 2179 ; if test
LD 0 2 ; (js: `d = db;`) (js: `{                ...`)
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2181 2181
LD 0 1 ; (js: `d = dr;`) (js: `{                ...`)
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2205 2205
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 1
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2193 2197 ; if test
LD 0 0 ; (js: `d = dl;`) (js: `{                ...`)
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2205 2205
LD 0 1 ; (js: `d = findGhostStra...`) (js: `{                ...`)
LD 0 0
LDC 0 ; literal
CONS
CONS
LD 2 2
AP 1
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2269 2269
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 0
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2217 2239 ; if test
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 1
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2227 2229 ; if test
LDC 0 ; if-cons-jump
TSEL 2237 2237
LD 2 8 ; (js: `d = findGhostStra...`) (js: `{                ...`)
LD 0 1
LDC 0 ; literal
CONS
CONS
LD 2 2
AP 1
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2269 2269
LD 6 7 ; (js: `if (matrixGet(map...`) (js: `{                ...`)
LD 2 7
LD 0 1
LD 8 11
AP 2
LD 8 7
AP 2
LDC 0 ; literal
CEQ
TSEL 2249 2259 ; if test
LD 2 8 ; (js: `d = findGhostStra...`) (js: `{                ...`)
LD 0 0
LDC 0 ; literal
CONS
CONS
LD 2 2
AP 1
ST 2 8
LDC 0 ; if-cons-jump
TSEL 2269 2269
LD 2 8 ; (js: `d = findGhostStra...`) (js: `{                ...`)
LD 0 0
LD 0 1
LDC 0 ; literal
CONS
CONS
CONS
LD 2 2
AP 1
ST 2 8
LD 2 7 ; (js: `pos = shiftDir(po...`)
LD 2 8
LD 8 11
AP 2
ST 2 7
LD 2 0 ; (js: `handleCollision();`)
AP 0
ATOM
TSEL 2278 2278 ; cleanup
LDC 0 ; literal (js: `return 0;`)
RTN
